/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/string> <std/utf> <std/map> <std/vector> <std/cstring> <std/ascii>

namespace std {
    namespace json {
        namespace ValueType {
            alias Nothing = -1;
            alias Integer = 0;
            alias Real = 1;
            alias Boolean = 2;
            alias String = 3;
            alias Object = 4;
            alias Array = 5;
        }

        struct Value {
            void* value;
            int type;
            uint length;
            char* name;

            void makeBoolean(bool value) {
                this.type = std::json::ValueType::Boolean;
                this.value = cast(void*)value;
                this.length = 1;
                this.name = null;
            }

            void makeInteger(long value) {
                this.type = std::json::ValueType::Integer;

                long* ptr = cast(void*)std::malloc(8);
                ptr[0] = value;
                this.value = ptr;
                
                this.length = 1;
                this.name = null;
            }

            void makeReal(double value) {
                this.type = std::json::ValueType::Real;
                
                double* ptr = cast(void*)std::malloc(8);
                ptr[0] = value;
                this.value = ptr;

                this.length = 1;
                this.name = null;
            }

            void makeString(char* cstring, usize len) {
                this.type = std::json::ValueType::String;
                this.value = cstring;
                this.length = len;
                this.name = null;
            }

            void makeArray(std::json::Value* values, uint length) {
                this.type = std::json::ValueType::Array;
                this.value = cast(void*)values;
                this.length = length;
                this.name = null;
            }

            void makeObject(std::json::Value* kv, uint length) {
                this.type = std::json::ValueType::Object;
                this.value = cast(void*)kv;
                this.length = length;
                this.name = null;
            }

            AS_T as<AS_T> {
                @if (@isNumeric(AS_T)) return = (cast(AS_T*)value)[0];
                @else {
                    @if (AS_T == char*) return = value;
                    @else @if (AS_T == std::cstring) return = std::cstring(value, length);
                    @else @if (AS_T == std::string) return = std::string(value);
                    @else {
                        @error("Unsupported type!");
                    }
                }
            }

            std::json::Value* pointer => cast(std::json::Value*)value;

            usize indexOf(char* name) {
                return = -1;
                if (this.type == std::json::ValueType::Object) {
                    std::json::Value* values = cast(std::json::Value*)this.value;
                    for (uint i=0; i<this.length; i++) {
                        if ((values[i].name != null) && (std::cstring::strcmp(values[i].name, name))) {
                            return = i;
                            break;
                        }
                    }
                }
            }

            (inline) usize indexOf(std::string name) => this.indexOf(name.data);

            (inline) bool contains(char* name) => this.indexOf(name) != -1;

            (inline) bool contains(std::string name) => this.indexOf(name.data) != -1;
            
            std::json::Value get(char* name) {
                return.value = null;
                return.name = null;
                return.length = -1;
                return.type = std::json::ValueType::Nothing;

                if (this.type == std::json::ValueType::Object) {
                    std::json::Value* values = cast(std::json::Value*)this.value;
                    for (uint i=0; i<this.length; i++) {
                        if ((values[i].name != null) && (std::cstring::strcmp(values[i].name, name))) {
                            return.value = values[i].value;
                            return.name = values[i].name;
                            return.length = values[i].length;
                            return.type = values[i].type;
                            break;
                        }
                    }
                }
            }

            void set(char* name, std::json::Value value) {
                usize idx = this.indexOf(name);

                if (idx != -1) {
                    std::json::Value* values = cast(std::json::Value*)this.value;
                    if (values[idx].value != null) ~(values[idx]);
                    values[idx] = value;
                    values[idx].name = name;
                }
                else {
                    // Just expand the object
                    this.value = std::realloc(this.value, sizeof(std::json::Value) * (this.length + 1));
                    std::json::Value* values = cast(std::json::Value*)this.value;
                    this.length += 1;
                    values[this.length - 1] = value;
                    values[this.length - 1].name = name;
                }
            }

            void setCString(char* name, std::cstring str) {
                char* ptr = std::malloc(str.length + 1);
                for (uint i=0; i<str.length; i++) ptr[i] = str.data[i];
                ptr[str.length] = '\0';

                std::json::Value newStr;
                newStr.makeString(ptr, str.length);
                this.set(name, newStr);
            }

            (inline) void setString(char* name, std::string str) => this.setCString(name, std::cstring(str.data, str.length));

            void setBoolean(char* name, bool value) {
                std::json::Value newBoolean;
                newBoolean.makeBoolean(value);
                this.set(name, newBoolean);
            }

            void setLong(char* name, long number) {
                std::json::Value newInteger;
                newInteger.makeInteger(number);
                this.set(name, newInteger);
            }

            (inline) void setInteger(char* name, int number) => this.setLong(name, cast(long)number);

            (inline) void setShort(char* name, short number) => this.setLong(name, cast(long)number);

            void setDouble(char* name, double number) {
                std::json::Value newReal;
                newReal.makeReal(number);
                this.set(name, newReal);
            }

            void setArray(char* name, std::json::Value* ptr, uint len) {
                std::json::Value* newPtr = cast(std::json::Value*)std::malloc(sizeof(std::json::Value) * (len + 1));
                for (uint i=0; i<len; i++) newPtr[i] = ptr[i];

                std::json::Value newArray;
                newArray.makeArray(ptr, len);
                this.set(name, newArray);
            }

            void setObject(char* name, std::json::Value* ptr, uint len) {
                std::json::Value* newPtr = cast(std::json::Value*)std::malloc(sizeof(std::json::Value) * (len + 1));
                for (uint i=0; i<len; i++) newPtr[i] = ptr[i];

                std::json::Value newObject;
                newObject.makeObject(ptr, len);
                this.set(name, newObject);
            }

            (inline) std::json::Value get(std::string name) => this.get(name.data);

            bool isVariable => (this.name == null);

            std::string toString {
                char[24] buffer;
                if (this.type == std::json::ValueType::Integer) return = std::string(std::cstring::ltos(this.as<long>(), &buffer));
                else if (this.type == std::json::ValueType::Real) return = std::string(std::cstring::dtos(this.as<double>(), 8, &buffer));
                else if (this.type == std::json::ValueType::Boolean) {
                    if (this.as<bool>()) return = std::string("true");
                    else return = std::string("false");
                }
                else if (this.type == std::json::ValueType::String) {
                    return = std::string("\"");
                    return.appendC(this.value);
                    return.add('\"');
                }
                else if (this.type == std::json::ValueType::Array) {
                    return = std::string("[");
                    std::json::Value* values = this.pointer();

                    for (uint i=0; i<this.length; i++) {
                        std::string buffer = values[i].toString();
                        return.append(buffer);
                        if ((i + 1) < this.length) return.add(',');
                        ~buffer;
                    }
                    
                    return.add(']');
                }
                else if (this.type == std::json::ValueType::Object) {
                    return = std::string("{");
                    std::json::Value* values = this.pointer();

                    for (uint i=0; i<this.length; i++) {
                        std::string buffer = values[i].toString();
                        return.add('"');
                        return.appendC(values[i].name);
                        return.appendC("\":");
                        return.append(buffer);
                        if ((i + 1) < this.length) return.add(',');
                        ~buffer;
                    }
                    
                    return.add('}');
                }
                else return = std::string("null");
            }

            void ~this {
                if ((this.value != null) && (this.type != std::json::ValueType::Boolean)) {
                    if ((this.type == std::json::ValueType::Array) || (this.type == std::json::ValueType::Object)) {
                        // Free every element of array or object
                        std::json::Value* elements = cast(std::json::Value*)(this.value);
                        for (uint i=0; i<this.length; i++) {
                            std::json::Value element = elements[i];
                            ~element;
                        }
                    }
                    std::free(this.value);
                    this.value = null;
                    this.length = 0;
                }
            }
        }

        namespace parser {
            std::json::Value parseObject(std::string* buffer, std::cstring data, usize* idx);

            void skip(std::cstring data, usize* idx) {
                while ((idx[0] < data.length) && (std::ascii::isSpace(data.at(idx[0])))) idx[0] += 1;
            }

            std::json::Value parseBoolean(std::cstring data, usize* idx) {
                bool value = false;

                if ((idx[0] + 5) < data.length) {
                    if ((data.at(idx[0]) == 't') && (data.at(idx[0] + 1) == 'r') && (data.at(idx[0] + 2) == 'u') && (data.at(idx[0] + 3) == 'e')) {
                        value = true;
                        idx[0] += 4;
                    }
                    else if ((data.at(idx[0]) == 'f') && (data.at(idx[0] + 1) == 'a') && (data.at(idx[0] + 2) == 'l') && (data.at(idx[0] + 3) == 's') && (data.at(idx[0] + 4) == 'e')) idx[0] += 5;
                }

                return.makeBoolean(value);
            }
            
            std::json::Value parseNumber(std::string* buffer, std::cstring data, usize* idx) {
                bool isFloat = false;

                std::json::parser::skip(data, idx);
                buffer.length = 0;

                if (data.at(idx[0]) == '-') {
                    buffer.add('-');
                    idx[0] += 1;
                }
                else if (data.at(idx[0]) == '+') idx[0] += 1;

                while ((idx[0] < data.length) && std::ascii::isDigit(data.at(idx[0]))) {
                    buffer.add(data.at(idx[0]));
                    idx[0] += 1;
                    std::json::parser::skip(data, idx);

                    if (data.at(idx[0]) == '.') {
                        isFloat = true;
                        buffer.add('.');
                        idx[0] += 1;
                    }
                }

                if (isFloat) return.makeReal(buffer.toDouble());
                else return.makeInteger(buffer.toLong());
            }

            std::json::Value parseString(std::string* buffer, std::cstring data, usize* idx) {
                std::json::parser::skip(data, idx);
                buffer.length = 0;

                idx[0] += 1; // skip first "
                while ((idx[0] < data.length) && (data.at(idx[0]) != '"')) {
                    if ((data.at(idx[0]) == '\\')) {
                        switch(data.at(idx[0] + 1)) {
                            case('"') buffer.add('"');
                            case('n') buffer.add('\n');
                            case('r') buffer.add('\r');
                            case('t') buffer.add('\t');
                            case('\'') buffer.add('\'');
                        }
                        idx[0] += 2;
                    }
                    else {
                        buffer.add(data.at(idx[0]));
                        idx[0] += 1;
                    }
                }
                idx[0] += 1; // skip last "

                char* sbuf = std::malloc(buffer.length + 1);
                for (usize i=0; i<buffer.length; i++) sbuf[i] = buffer.data[i];
                sbuf[buffer.length] = '\0';

                return.makeString(sbuf, buffer.length);
            }

            std::json::Value parseArray(std::string* buffer, std::cstring data, usize* idx) {
                std::json::parser::skip(data, idx);

                std::vector<std::json::Value> array = std::vector<std::json::Value>();

                idx[0] += 1; // skip [
                while ((idx[0] < data.length) && (data.at(idx[0]) != ']')) {
                    std::json::parser::skip(data, idx);
                    if ((data.at(idx[0]) == '-') || (data.at(idx[0]) == '+') || std::ascii::isDigit(data.at(idx[0]))) array.add(std::json::parser::parseNumber(buffer, data, idx));
                    else if ((data.at(idx[0]) == '\"')) array.add(std::json::parser::parseString(buffer, data, idx));
                    else if ((data.at(idx[0]) == '[')) array.add(std::json::parser::parseArray(buffer, data, idx));
                    else if ((data.at(idx[0]) == '{')) array.add(std::json::parser::parseObject(buffer, data, idx));
                    else array.add(std::json::parser::parseBoolean(data, idx));

                    std::json::parser::skip(data, idx);
                    if (data.at(idx[0]) == ',') idx[0] += 1;
                }
                idx[0] += 1; // skip ]

                return.makeArray(array.data, array.length);
            }

            char* parseVarName(std::string* buffer, std::cstring data, usize* idx) {
                // TODO: Add checks for possible " errors
                buffer.length = 0;
                
                idx[0] += 1; // skip first "
                while ((idx[0] < data.length) && (data.at(idx[0]) != '"')) {
                    if ((data.at(idx[0]) == '\\') && (data.at(idx[0] + 1) == '"')) {
                        buffer.add('\\');
                        buffer.add('"');
                        idx[0] += 2;
                    }
                    else {
                        buffer.add(data.at(idx[0]));
                        idx[0] += 1;
                    }
                }
                idx[0] += 1; // skip last "

                return = std::malloc(buffer.length + 1);
                for (usize i=0; i<buffer.length; i++) return[i] = buffer[0].at(i);
                return[buffer.length] = '\0';
            }

            std::json::Value parseObject(std::string* buffer, std::cstring data, usize* idx) {
                std::json::parser::skip(data, idx);

                std::vector<std::json::Value> object = std::vector<std::json::Value>();

                idx[0] += 1; // skip {
                while ((idx[0] < data.length) && (data.at(idx[0]) != '}')) {
                    std::json::parser::skip(data, idx);
                    // Current symbol must be '"'
                    // TODO: Add check for possible errors
                    if (data.at(idx[0]) == '"') {
                        std::json::Value variable;
                        char* varName = std::json::parser::parseVarName(buffer, data, idx);

                        std::json::parser::skip(data, idx);
                        if (data.at(idx[0]) == ':') idx[0] += 1;
                        std::json::parser::skip(data, idx);

                        if ((data.at(idx[0]) == '-') || (data.at(idx[0]) == '+') || std::ascii::isDigit(data.at(idx[0]))) variable = std::json::parser::parseNumber(buffer, data, idx);
                        else if (data.at(idx[0]) == '"') variable = std::json::parser::parseString(buffer, data, idx);
                        else if (data.at(idx[0]) == '[') variable = std::json::parser::parseArray(buffer, data, idx);
                        else if (data.at(idx[0]) == '{') variable = std::json::parser::parseObject(buffer, data, idx);
                        else variable = std::json::parser::parseBoolean(data, idx);

                        variable.name = varName;
                        object.add(variable);

                        std::json::parser::skip(data, idx);
                        if (data.at(idx[0]) == ',') idx[0] += 1;
                    }
                    else idx[0] += 1;
                }
                idx[0] += 1; // skip }

                return.makeObject(object.data, object.length);
            }
        }

        std::json::Value parseBuffer(std::string* buffer, std::cstring data) {
            usize idx = 0;

            return = std::json::parser::parseObject(buffer, data, &idx);
        }

        (explicit, inline) std::json::Value parseBuffer(std::string* buffer, std::string str) => std::json::parseBuffer(buffer, std::cstring(str.data, str.length));

        std::json::Value parse(std::cstring str) {
            std::string buffer = "";
            return = std::json::parseBuffer(&buffer, str);
            ~buffer;
        }

        (explicit, inline) std::json::Value parse(std::string str) => std::json::parse(std::cstring(str.data, str.length));
    }
}