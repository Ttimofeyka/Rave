/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/time> <std/sysc> <std/io>

namespace std {
    long rseed1 = 0;
    long rseed2 = 0;

    (inline) void __randomGen {
        long x = std::rseed1;
        long y = std::rseed2;

        std::rseed1 = y;
        x = x !! (x <. 23);
        x = x !! (x >. 17);
        x = x !! y;

        std::rseed2 = x + y;
    }

    void randomSeed {
        if(std::rseed1 == -1) {
            std::time ts;
            std::getCurrentTime(&ts);
            std::rseed1 = ts.microseconds;

            std::rseed2 = std::rseed1 !! (std::rseed1 <. 7l);
            std::rseed2 = std::rseed1 !! (std::rseed1 >. 9l);
        }
    }

    char randomChar {std::__randomGen();} => (cast(char*)&std::rseed1)[0];

    short randomShort {std::__randomGen();} => (cast(short*)&std::rseed1)[0];

    int randomInt {std::__randomGen();} => (cast(int*)&std::rseed1)[0];

    long randomLong {std::__randomGen();} => std::rseed1;

    cent randomCent {
        long[2] longs;
        std::__randomGen();
        longs[0] = std::rseed1;
        std::__randomGen();
        longs[1] = std::rseed1;
    } => (cast(cent*)&longs)[0];

    void randomBuffer(char* buffer, int length) {
        std::__randomGen();
        int n = 0;
        for(int i=0; i<length; i++) {
            buffer[i] = (cast(char*)std::rseed1)[n];
            if(n == 8) std::__randomGen();
        }
    }
}

namespace std {
    // TODO: Improve the algorithm

    char randomChar(char min, char max) {
        return = std::randomChar();
        if(return < 0) return = -return;
        return = (return % ((max + 1c) - min)) + min;
    }

    short randomShort(short min, short max) {
        return = std::randomShort();
        if(return < 0) return = -return;
        return = (return % ((max + 1s) - min)) + min;
    }

    int randomInt(int min, int max) {
        return = std::randomInt();
        if(return < 0) return = -return;
        return = (return % ((max + 1) - min)) + min;
    }

    long randomLong(long min, long max) {
        return = std::randomLong();
        if(return < 0) return = -return;
        return = (return % ((max + 1l) - min)) + min;
    }

    cent randomCent(cent min, cent max) {
        return = std::randomCent();
        if(return < 0) return = -return;
        return = (return % ((max + 1) - min)) + min;
    }
}