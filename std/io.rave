/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/arg> <std/string> <std/utf> <std/thread> <std/process> <std/time>

namespace libc {
    struct File {
	    void* __builtInLibc;
    }
}

namespace std {
    struct fstat {
        ulong dev;
        ulong ino;
        ushort mode;
        uint nlink;
        int uid;
        int gid;
        ulong rdev;
        long size;
        int blksize;
        long blkcnt;
        long st_atime;
        long st_mtime;
        long st_ctime;
    }
}

namespace std {
    namespace file {
        namespace position {
            alias start = 0;
            alias current = 1;
            alias end = 2;
        }
    }
}

@if((__RAVE_OS == "LINUX") || (__RAVE_OS == "FREEBSD")) {
    namespace std {
        namespace file {
            alias atFdCwd = -100;
            alias rdOnly = 0;
            alias wrOnly = 1;
            alias rdWrOnly = 2;
            alias oCreate = 64;
            alias oDirectory = 65536;

            (inline) int rename(char* oldpath, char* newpath) => cast(int)std::syscall(std::sysctable::RenameTo, -100, oldpath, -100, newpath);

            (inline) int __unlinkat(int dirfd, char* pathname, int flags) => cast(int)std::syscall(std::sysctable::UnlinkAt, dirfd, pathname, flags);

            int remove(char* path) => std::file::__unlinkat(-100, path, 0);
            int getStat(int fd, std::fstat* buffer) => cast(int)std::syscall(std::sysctable::FStat, fd, buffer);

            (inline) int __faccessat(int dirfd, char* fname, int mode, int flag) => cast(int)std::syscall(std::sysctable::FAccessAt, dirfd, fname, mode, flag);
            int __access(char* fname, int flag) => std::file::__faccessat(std::file::atFdCwd, fname, flag, 0);
        }
    }
}
@else @if(__RAVE_OS == "WINDOWS") {
    namespace std {
        namespace file {
            extern(linkname: "MoveFileW") char __rename(ushort* oldpath, ushort* newpath);
            extern(linkname: "DeleteFileW") char __remove(ushort* path);

            int rename(char* oldpath, char* newpath) {
                ushort* __oldpath = std::utf8::toUTF16(oldpath);
                ushort* __newpath = std::utf8::toUTF16(newpath);
                defer std::free(__oldpath);
                defer std::free(__newpath);
                return = cast(int)(std::file::__rename(__oldpath, __newpath) > 0);
            }

            int remove(char* path) {
                ushort* __path = std::utf8::toUTF16(path);
                defer std::free(__path);
                return = cast(int)(std::file::__remove(__path) > 0);
            }

            extern(linkname: "_access") int __access(char* fname, int flag);
        }
    }
}
@else {
    namespace std {
        namespace file {
            extern(linkname: "rename") int rename(char* oldpath, char* newpath);
            extern(linkname: "remove") int remove(char* path);

            int __access(char* fname, int flag) {
                libc::File* f = libc::fopen(fname, "r");
                if(f == null) return = -1;
                else {
                    libc::fclose(f);
                    return = 0;
                }
            }
        }
    }
}

namespace std {
    namespace file {
        (inline) int rename(std::string oldpath, std::string newpath) => std::file::rename(oldpath.data, newpath.data);

        (inline) int remove(std::string path) => std::file::remove(path.data);

        (inline) bool exists(char* fname) => (std::file::__access(fname, 0) == 0);

        (inline) bool exists(std::string fname) => (std::file::__access(fname.data, 0) == 0);
    }
}

@if((__RAVE_OS == "LINUX") || (__RAVE_OS == "FREEBSD")) {
    namespace std {
        struct file {
            int fd;
            char* buffer; // Default: 1024
            int bufferSize;
            int bufferPos;
            char* name;
            char flushBufferSymbol;

            std::file this(char* name) {
                std::file this;
                this.buffer = null;
                this.bufferSize = 1024;
                this.name = name;
                this.fd = -1;
                this.flushBufferSymbol = cast(char)-1;
            } => this;

            std::file this(char* name, int bufferSize) {
                std::file this;
                this.buffer = null;
                this.bufferSize = bufferSize;
                this.name = name;
                this.fd = -1;
                this.flushBufferSymbol = cast(char)-1;
            } => this;

            std::file this(std::string name) {
                std::file this;
                this.buffer = null;
                this.bufferSize = 1024;
                this.name = name.data;
                this.fd = -1;
                this.flushBufferSymbol = cast(char)-1;
            } => this;

            std::file this(std::string name, int bufferSize) {
                std::file this;
                this.buffer = null;
                this.bufferSize = bufferSize;
                this.name = name.data;
                this.fd = -1;
                this.flushBufferSymbol = cast(char)-1;
            } => this;

            void open(char* mode) {
                if(std::cstring::strcmp(mode, "r")) fd = cast(int)std::syscall(std::sysctable::OpenAt, std::file::atFdCwd, name, std::file::rdOnly | std::file::oCreate, 448);
                else if(std::cstring::strcmp(mode, "w")) {
                    fd = cast(int)std::syscall(std::sysctable::OpenAt, std::file::atFdCwd, name, std::file::wrOnly | std::file::oCreate, 448);
                    buffer = std::malloc(bufferSize);
                    this.bufferPos = 0;
                }
                else if(std::cstring::strcmp(mode, "rw") || std::cstring::strcmp(mode, "wr") || std::cstring::strcmp(mode, "r+") || std::cstring::strcmp(mode, "w+")) {
                    fd = cast(int)std::syscall(std::sysctable::OpenAt, std::file::atFdCwd, name, std::file::rdWrOnly | std::file::oCreate, 448);
                    buffer = std::malloc(bufferSize);
                    this.bufferPos = 0;
                }
                else fd = -1;
            }

            void openFd(char* mode, int fd) {
                this.fd = fd;
                if(std::cstring::strcmp(mode, "w") || std::cstring::strcmp(mode, "rw") || std::cstring::strcmp(mode, "wr") || std::cstring::strcmp(mode, "r+") || std::cstring::strcmp(mode, "w+")) {
                    buffer = std::malloc(bufferSize);
                    this.bufferPos = 0;
                }
            }

            (inline) bool isOpen => (fd >= 0);

            void rename(char* to) {
                std::file::rename(this.name, to);
                this.name = to;
            }

            bool exists {
                if(fd == -1) return = std::file::exists(this.name);
                else return = true;
            }

            int seek(int flag, long offset) => cast(int)std::syscall(std::sysctable::LSeek, fd, flag, offset);

            void flush {
                if((fd != -1) && (bufferPos > 0) && (buffer != null)) {
                    std::syscall(std::sysctable::Write, fd, buffer, bufferPos);
                    bufferPos = 0;
                }
            }

            isize read(char* buffer, usize bytes) {
                if(fd != -1) return = cast(isize)std::syscall(std::sysctable::Read, fd, buffer, bytes);
                else return = -1;
            }

            isize write(char* buf, usize bytes) {
                if(fd != -1) {
                    if(bytes < bufferSize) {
                        for(usize i=0; i<bytes; i++) {
                            buffer[bufferPos] = buf[i];
                            bufferPos += 1;
                            if((bufferPos == bufferSize) || (buffer[bufferPos - 1] == flushBufferSymbol)) this.flush();
                        }
                    }
                    else {
                        this.flush();
                        return = cast(isize)std::syscall(std::sysctable::Write, fd, buf, bytes);
                    }
                }
                else return = -1;
            }

            (inline) char getc {this.read(&return, 1);}
            (inline) isize putc(char c) => this.write(&c, 1);

            void close {
                if(fd != -1) {
                    this.flush();
                    std::syscall(std::sysctable::Close, fd);
                    if(buffer != null) {
                        std::free(buffer);
                        buffer = null;
                    }
                    fd = -1;
                }
            }

            void readLineBuffer(std::string* buffer) {
                char ch = this.getc();
                while((ch != '\n') && (ch != 0)) {
                    buffer.add(ch);
                    ch = this.getc();
                }
            }

            (inline) std::string readLine {return = ""; readLineBuffer(&return);}

            void readAllBuffer(std::string* buffer) {
                char ch = this.getc();
                while(ch != 0) {
                    buffer.add(ch);
                    ch = this.getc();
                }
            }

            (inline) std::string readAll {return = ""; readAllBuffer(&return);}

            void ~this {
                if(this.fd != -1) {
                    if(this.bufferPos > 0) {
                        std::syscall(std::sysctable::Write, this.fd, this.buffer, this.bufferPos);
                        this.bufferPos = 0;
                    }
                    std::syscall(std::sysctable::Close, this.fd);
                    this.fd = -1;
                }

                if(this.buffer != null) {
                    std::free(this.buffer);
                    this.buffer = null;
                }

                this.bufferPos = 0;
            }
        }
    }
}
@else @if(__RAVE_OS == "WINDOWS") {
    namespace std {
        namespace file {
            alias stdOutputHandle = -11;
            alias stdErrorHandle = -12;

            alias genericAll = 268435456;
            alias genericExecute = 536870912;
            alias genericWrite = 1073741824;
            alias genericRead = 2147483648;

            alias fileShareRead = 1;
            alias fileShareWrite = 2;

            extern(linkname: "GetStdHandle") void* GetStdHandle(int nStdHandle);
            extern(linkname: "CreateFileW") void* CreateFileW(ushort* fName, int dAccess, int sMod, void* sAttributes, int cDisposition, int fAndAttributes, void* templateFile);
            extern(linkname: "WriteFile") char WriteFile(void* file, void* buffer, int length, int* out, void* overlapped);
            extern(linkname: "ReadFile") char ReadFile(void* file, void* buffer, int length, int* out, void* overlapped);
            extern(linkname: "SetFilePointerEx") int SetFilePointerEx(void* file, long distToMove, long* newFilePtr, uint moveMethod);
        }

        struct file {
            void* fd;
            char* buffer; // Default: 1024
            int bufferSize;
            int bufferPos;
            char* name;
            ushort* __name;
            char flushBufferSymbol;
            bool __isStdHandle;

            std::file this(char* name) {
                std::file this;
                this.buffer = null;
                this.bufferSize = 1024;
                this.name = name;
                this.__name = null;
                this.fd = null;
                this.flushBufferSymbol = cast(char)-1;
                this.__isStdHandle = false;
            } => this;

            std::file this(char* name, int bufferSize) {
                std::file this;
                this.buffer = null;
                this.bufferSize = bufferSize;
                this.name = name;
                this.__name = null;
                this.fd = null;
                this.flushBufferSymbol = cast(char)-1;
                this.__isStdHandle = false;
            } => this;

            void open(char* mode) {
                if(__name == null) __name = std::utf8::toUTF16(name);

                if(std::cstring::strcmp(mode, "r")) {
                    fd = std::file::CreateFileW(
                        __name, std::file::genericRead,
                        std::file::fileShareRead, null,
                        4, 0, null
                    );
                }
                else if(std::cstring::strcmp(mode, "w")) {
                    fd = std::file::CreateFileW(
                        __name, std::file::genericWrite,
                        std::file::fileShareRead, null,
                        4, 0, null
                    );
                    buffer = std::malloc(bufferSize);
                    this.bufferPos = 0;
                }
                else if(std::cstring::strcmp(mode, "rw") || std::cstring::strcmp(mode, "wr") || std::cstring::strcmp(mode, "r+") || std::cstring::strcmp(mode, "w+")) {
                    fd = std::file::CreateFileW(
                        __name, std::file::genericRead | std::file::genericWrite,
                        std::file::fileShareRead, null,
                        4, 0, null
                    );
                    buffer = std::malloc(bufferSize);
                    this.bufferPos = 0;
                }
                else fd = null;
            }

            void openFd(char* mode, void* fd) {
                this.fd = fd;
                if(std::cstring::strcmp(mode, "w") || std::cstring::strcmp(mode, "rw") || std::cstring::strcmp(mode, "wr") || std::cstring::strcmp(mode, "r+") || std::cstring::strcmp(mode, "w+")) {
                    buffer = std::malloc(bufferSize);
                    this.bufferPos = 0;
                }
            }

            (inline) bool isOpen => (fd != null);

            void rename(char* to) {
                ushort* __to = std::utf8::toUTF16(to);

                if(__name == null) __name = std::utf8::toUTF16(name);

                std::file::__rename(__name, __to);
                name = to;

                std::free(__name);
                __name = __to;
            }

            bool exists {
                if(fd == null) return = std::file::exists(this.name);
                else return = true;
            }

            int seek(int flag, long offset) => std::file::SetFilePointerEx(fd, offset, cast(long*)null, flag);

            void flush {
                if((fd != null) && (bufferPos > 0) && (buffer != null)) {
                    std::file::WriteFile(fd, buffer, bufferPos, cast(int*)null, null);
                    bufferPos = 0;
                }
            }

            int read(char* buffer, uint bytes) {
                uint bytesCnt = 0;
                if(fd != null) {
                    std::file::ReadFile(fd, buffer, bufferPos, &return, &bytesCnt);
                    if((bytesCnt == 0) && (return > 0)) return = -1;
                }
                else return = -1;
            }

            int write(char* buf, uint bytes) {
                if(fd != null) {
                    if(bytes < bufferSize) {
                        for(uint i=0; i<bytes; i++) {
                            buffer[bufferPos] = buf[i];
                            bufferPos += 1;
                            if((bufferPos == bufferSize) || (buffer[bufferPos - 1] == flushBufferSymbol)) this.flush();
                        }
                    }
                    else {
                        this.flush();
                        std::file::WriteFile(fd, buf, bytes, &return, null);
                    }
                }
                else return = -1;
            }

            (inline) char getc {this.read(&return, 1);}
            (inline) int putc(char c) => this.write(&c, 1);

            void close {
                if(__name != null) {
                    __name = null;
                    std::free(__name);
                }

                if(fd != null) {
                    this.flush();
                    if(!__isStdHandle) std::process::__CloseHandle(fd);
                    if(buffer != null) {
                        std::free(buffer);
                        buffer = null;
                    }
                    fd = null;
                }
            }

            void readLineBuffer(std::string* buffer) {
                char ch = this.getc();
                while((ch != '\n') && (ch != 0)) {
                    buffer.add(ch);
                    ch = this.getc();
                }
            }

            (inline) std::string readLine {return = ""; readLineBuffer(&return);}

            void readAllBuffer(std::string* buffer) {
                char ch = this.getc();
                while(ch != 0) {
                    buffer.add(ch);
                    ch = this.getc();
                }
            }

            (inline) std::string readAll {return = ""; readAllBuffer(&return);}

            void ~this {
                if(this.__name != null) {
                    std::free(cast(void*)(this.__name));
                    this.__name = null;
                }

                if(this.fd != null) {
                    if(this.bufferPos > 0) {
                        std::file::WriteFile(this.fd, this.buffer, this.bufferPos, cast(int*)null, null);
                        this.bufferPos = 0;
                    }
                    std::process::__CloseHandle(this.fd);
                    this.fd = null;
                }

                if(this.buffer != null) {
                    std::free(this.buffer);
                    this.buffer = null;
                }

                this.bufferPos = 0;
            }
        }
    }
}
@else {
    namespace libc {
        extern(linkname: "fopen") libc::File* fopen(char* path, char* mode);
        extern(linkname: "fdopen") libc::File* fdopen(int fd, char* mode);
        extern(linkname: "fclose") int fclose(libc::File* file);
        extern(linkname: "ferror") int fhasError(libc::File* file);
        extern(linkname: "fflush") int fflush(libc::File* file);
        extern(linkname: "fscanf", vararg) int fscanf(libc::File* file, char* fmt);
        extern(linkname: "feof") int feof(libc::File* file);
        extern(linkname: "fgetc") char fgetc(libc::File* file);
        extern(linkname: "fread") int fread(void* buffer, int size, int n, libc::File* file);
        extern(linkname: "fseek") int fseek(libc::File* stream, int offset, int origin);
        extern(linkname: "ftell") int ftell(libc::File* stream);
        extern(linkname: "fwrite") int fwrite(void* buffer, int size, int n, libc::File* stream);
        extern(linkname: "getline") int getline(char** buffer, int* len, int fd);
    }

    namespace std {
        struct file {
            libc::File* _file;
            char* name;
            bool isOpen;

            std::file this(char* name) {
                std::file this;
                this.name = name;
                this.isOpen = false;
            } => this;

            std::file this(std::string name) {
                std::file this;
                this.name = name.data;
                this.isOpen = false;
            } => this;

            void operator=(std::file* one, char* two) {one[0] = std::file(two);}

            void open(char* mode) {
                this._file = libc::fopen(this.name, mode);
                this.isOpen = (this._file != null);
            }

            void close {
                if(this.isOpen) {
                    libc::fclose(this._file);
                    this.isOpen = false;
                }
            }

            void ~this {
                if(this._file != null) {
                    if(this.isOpen) {
                        libc::fclose(this._file);
                        this.isOpen = false;
                    }
                }
                this._file = null;
            }

            void rename(char* to) {
                std::file::rename(this.name, to);
                this.name = to;
            }

            (inline) void remove {std::file::remove(this.name);}

            int read(void* buffer, int size) => libc::fread(buffer, 1, size, this._file);
            int write(void* buffer, int size) => libc::fwrite(buffer, 1, size, this._file);

            char getc => libc::fgetc(this._file);

            int seek(int offset, int flag) => libc::fseek(this._file, offset, flag);

            void readLineBuffer(std::string* buffer) {
                char ch = this.getc();
                while((ch != '\n') && (ch != -1)) {
                    buffer.add(ch);
                    ch = this.getc();
                }
            }

            (inline) std::string readLine {return = ""; readLineBuffer(&return);}

            void readAllBuffer(std::string* buffer) {
                char ch = this.getc();
                while(ch != -1) {
                    buffer.add(ch);
                    ch = this.getc();
                }
            }

            (inline) std::string readAll {return = ""; readAllBuffer(&return);}

            bool exists {
                if(this.isOpen == false) return = std::file::exists(this.name);
                else return = true;
            }

            int flush => libc::fflush(this._file);
        }
    }
}

namespace std {
    extern(vararg, linkname: "scanf") int scanf(char* fmt);
    extern(linkname: "getchar") char getchar();
    extern(linkname: "putchar") int putchar(char c);

    std::spinlock __putsSL;
    void puts(char* s) {
        std::__putsSL.lock();
            for(int i=0; s[i] != '\0'; i+=1) std::putchar(s[i]);
            std::putchar('\n');
        std::__putsSL.unlock();
    }

    std::spinlock __putswnlSL;
    void putswnl(char* s) {
        std::__putswnlSL.lock();
            for(int i=0; s[i] != '\0'; i+=1) std::putchar(s[i]);
        std::__putswnlSL.unlock();
    }

    (inline) void putswnl(std::string s) => std::putswnl(s.data);

    (private, ctargs, inline) void print {
        std::string s = @callWithArgs(std::gsprint);
        std::putswnl(s);
    }

    (private, ctargs, inline) void println {
        @callWithArgs(std::print, '\n');
    }

    (private, ctargs, inline) void fprint {
        std::file* f = @getArg(std::file*, 0);
        @skipArg();
        std::string str = @callWithArgs(std::gsprint);
        f.write(str.c(), str.length);
    }

    (private, ctargs, inline) void fprintln {
        @callWithArgs(std::fprint, '\n');
    }
}

namespace std {
    (inline, ctargs) void input {
        char[42] buffer;
        usize idx;
        char sign;

        @foreachArgs() {
            @if(@getCurrArgType() == char*) {
                char* pointer = @getCurrArg(char*);
                char c = std::getchar();
                while(std::ascii::isSpace(c)) c = std::getchar();
                pointer[0] = c;
            }
            @else @if(
                (@getCurrArgType() == short*) || (@getCurrArgType() == int*) || (@getCurrArgType() == long*) || (@getCurrArgType() == cent*) ||
                (@getCurrArgType() == ushort*) || (@getCurrArgType() == uint*) || (@getCurrArgType() == ulong*) || (@getCurrArgType() == ucent*)
            ) {
                auto pointer = @getCurrArg(@getCurrArgType());
                idx = 0;
                char c = std::getchar();

                while(std::ascii::isSpace(c)) c = std::getchar();

                if(!std::ascii::isDigit(c)) {
                    if(c == '-') {buffer[0] = '-'; idx += 1;}
                    c = std::getchar();
                }

                while(std::ascii::isDigit(c)) {
                    if(idx >= 41) break;
                    buffer[idx] = c;
                    idx += 1;
                    c = std::getchar();
                }

                @if((@getCurrArgType() != cent*) && (@getCurrArgType() != ucent*)) {
                    @if(@isUnsigned(@baseType(@getCurrArgType()))) pointer[0] = std::cstring::stoul(&buffer, idx);
                    @else pointer[0] = std::cstring::stol(&buffer, idx);
                }
                @else {
                    @if(@isUnsigned(@baseType(@getCurrArgType()))) pointer[0] = std::cstring::stouc(&buffer, idx);
                    @else pointer[0] = std::cstring::stoc(&buffer, idx);
                }
            }
            @else @if((@getCurrArgType() == half*) || (@getCurrArgType() == bhalf*) || (@getCurrArgType() == float*) || (@getCurrArgType() == double*) || (@getCurrArgType() == real*)) {
                auto pointer = @getCurrArg(@getCurrArgType());
                idx = 0;
                char c = std::getchar();

                while(std::ascii::isSpace(c)) c = std::getchar();

                if(!std::ascii::isDigit(c)) {
                    if(c == '-') {buffer[0] = '-'; idx += 1;}
                    c = std::getchar();
                }

                // First part
                while(std::ascii::isDigit(c)) {
                    if(idx >= 41) break;
                    buffer[idx] = c;
                    idx += 1;
                    c = std::getchar();
                }

                if((idx < 41) && (c == '.')) {
                    buffer[idx] = '.';
                    idx += 1;

                    // Second part
                    while(std::ascii::isDigit(c)) {
                        if(idx >= 41) break;
                        buffer[idx] = c;
                        idx += 1;
                        c = std::getchar();
                    }
                }
                
                @if(@getCurrArgType() != real*) pointer[0] = std::cstring::stod(&buffer, idx);
                @else pointer[0] = std::cstring::stor(&buffer, idx);
            }
            @else @if(@getCurrArgType() == std::string*) {
                auto buffer = @getCurrArg(@getCurrArgType());
                char c = std::getchar();

                if(buffer.data == null) buffer = "";
                else {
                    buffer.length = 0;
                    buffer.data[0] = '\0';
                }

                while(std::ascii::isSpace(c)) c = std::getchar();
                while(!std::ascii::isSpace(c)) {
                    buffer.add(c);
                    c = std::getchar();
                }
            }
        }
    }

    void readLineBuffer(std::string* buffer) {
        char ch = std::getchar();
        while((ch != '\n') && (ch != -1)) {
            buffer.add(ch);
            ch = std::getchar();
        }
    }

    (inline) std::string readLine {return = ""; std::readLineBuffer(&return);}

    namespace ansi {
        alias black = "\033[30m";
        alias red = "\033[31m";
        alias green = "\033[32m";
        alias yellow = "\033[33m";
        alias blue = "\033[34m";
        alias purpure = "\033[35m";
        alias cyan = "\033[36m";
        alias white = "\033[37m";
        alias reset = "\033[0m";
    }
}

// Experimental!

@if(__RAVE_OS == "LINUX") {
    namespace std {
        struct __dirent64 {
            ulong inode;
            long off;
            ushort reclen;
            uchar type;
        }

        namespace directory {
            alias dtUnknown = 0;
            alias dtFifo = 1;
            alias dtChr = 2;
            alias dtDir = 4;
            alias dtBlk = 6;
            alias dtReg = 8;
            alias dtLnk = 10;
            alias dtSock = 12;
            alias dtWht = 14;

            (inline) bool exists(char* dname) {
                int fd = cast(int)std::syscall(std::sysctable::OpenAt, std::file::atFdCwd, dname, std::file::rdOnly | std::file::oDirectory, 448);

                if(fd != -1) {return = true; std::syscall(std::sysctable::Close, fd);}
                else return = false;
            }

            (inline) int create(char* dname) => cast(int)std::syscall(std::sysctable::MakeDirAt, std::file::atFdCwd, dname, 448 | 56 | 4 | 1);

            (inline) int create(std::string dname) => std::directory::create(dname.data);
        }

        struct directory {
            char* path;
            int fd;

            std::directory this(char* path) {
                std::directory this;

                this.path = path;
                this.fd = -1;
            } => this;

            std::directory this(std::string path) {
                std::directory this;

                this.path = path.data;
                this.fd = -1;
            } => this;

            (inline) void open {
                fd = cast(int)std::syscall(std::sysctable::OpenAt, std::file::atFdCwd, path, std::file::rdOnly | std::file::oDirectory, 448);
            }

            (inline) void close {
                std::syscall(std::sysctable::Close, fd);
                fd = -1;
            }

            void readEntriesBuffer(std::vector<std::string>* list) {
                char[256] buffer;
                char* bufferPtr = &buffer;

                while(true) {
                    int n = cast(int)std::syscall(std::sysctable::GetDents64, fd, &buffer, 256);

                    if(n <= 0) break;

                    // Processing

                    std::__dirent64* value;

                    int i = 0;
                    while(i < n) {
                        value = itop(std::__dirent64*, ptoi(bufferPtr) + i);

                        list.add(std::string(itop(char*, ptoi(value.&type) + 1)));
                        
                        i += value.reclen;
                    }
                }
            }

            (inline) std::vector<std::string> readEntries {return = std::vector<std::string>(); readEntriesBuffer(&return);}

            (inline) bool exists {
                if(fd != -1) return = true;
                else return = std::directory::exists(path);
            }
        }
    }
}
@else @if(__RAVE_OS == "WINDOWS") {
    namespace std {
        alias invalidFileAttributes = -1;
        alias fileAttributeDirectory = 16;

        extern(linkname: "GetFileAttributesW") int __GetFileAttributesW(ushort* name);
        extern(linkname: "CreateDirectoryW") char __CreateDirectoryW(ushort* pathName, void* securityAttributes);

        namespace directory {
            bool __exists(ushort* dname) {
                int type = std::__GetFileAttributesW(dname);
                return = ((type & std::fileAttributeDirectory) > 0);
            }

            (inline) bool exists(char* dname) {
                ushort* u16Str = std::utf8::toUTF16(dname);
                return = std::directory::__exists(u16Str);
                std::free(u16Str);
            }

            (inline) int __create(ushort* dname) => cast(int)std::__CreateDirectoryW(dname, null);

            (inline) int create(char* dname) {
                ushort* u16Str = std::utf8::toUTF16(dname);
                return = std::directory::__exists(u16Str);
                std::free(u16Str);
            }

            (inline) int create(std::string dname) => std::directory::create(dname.data);
        }

        struct __findDataW {
            int dwFileAttributes;
            std::__fileTime ftCreationTime;
            std::__fileTime ftLastAccessTime;
            std::__fileTime ftLastWriteTime;
            int nFileSizeHigh;
            int nFileSizeLow;
            int dwReserved0;
            int dwReserved1;
            ushort[257] cFileName;
            ushort[14] cAlternateFileName;
            int dwFileType;
            int dwCreatorType;
            short wFinderFlags;
        }
        
        extern(linkname: "FindFirstFileW") void* FindFirstFileW(ushort* fname, std::__findDataW* data);
        extern(linkname: "FindNextFileW") char FindNextFileW(void* file, std::__findDataW* data);
        extern(linkname: "FindClose") char FindClose(void* file);

        struct directory {
            char* path;
            ushort* __path;
            ushort* __pathSearch;
            
            std::directory this(char* path) {
                std::directory this;

                this.path = path;
                this.__path = null;
                this.__pathSearch = null;
            } => this;

            std::directory this(std::string path) {
                std::directory this;

                this.path = path.data;
                this.__path = null;
                this.__pathSearch = null;
            } => this;

            void open {
                usize pathLen = std::cstring::strlen(path);
                usize length = std::utf8::toUTF16Buffer(path, pathLen, null, 0);

                __path = std::new<ushort>(length + 1);
                __pathSearch = std::new<ushort>(length + 3);

                std::utf8::toUTF16Buffer(path, pathLen, __path, length);

                usize i = 0;
                for(; i<length; i++) __pathSearch[i] = __path[i];
                __pathSearch[i] = cast(ushort)('\\');
                __pathSearch[i + 1] = cast(ushort)('*');
                __pathSearch[i + 2] = 0s;
            }

            void readEntriesBuffer(std::vector<std::string>* list) {
                std::__findDataW* data = cast(std::__findDataW*)std::malloc(sizeof(std::__findDataW));
                defer std::free(cast(void*)data);

                void* handle = std::FindFirstFileW(__pathSearch, data);

                if(handle != null) {
                    while(true) {
                        usize length = std::utf16::strlen(data.&cFileName);
                        usize u8Length = std::utf16::toUTF8Buffer(data.&cFileName, length, null, 0);
                        std::string str = std::string(u8Length);
                        str.length = u8Length;
                        std::utf16::toUTF8Buffer(data.&cFileName, length, str.data, u8Length + 1);
                        list.add(str);

                        if(std::FindNextFileW(handle, data) == 0c) break;
                    }
                }
            }

            (inline) std::vector<std::string> readEntries {return = std::vector<std::string>(); readEntriesBuffer(&return);}
            
            void close {
                if(__path != null) {
                    std::free(__path);
                    __path = null;
                }

                if(__pathSearch != null) {
                    std::free(__pathSearch);
                    __pathSearch = null;
                }
            }
        }
    }
}