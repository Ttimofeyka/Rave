/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

// Original created via GeckoNerd - https://geckonerd.pw

// NOTE: This code IS outdated and unstable.
// TODO: Rework it.

import <std/string>
import <std/vector>
import <std/socket>
import <std/io>

@if(__RAVE_OS == "LINUX") {
    namespace ssl {
        extern(linkname: "SSL_CTX_new") void* ctxNew(void* method);
        extern(linkname: "SSL_CTX_free") void ctxFree(void* ctx);
        extern(linkname: "SSL_new") void* new(void* ctx);
        extern(linkname: "SSL_free") void free(void* ssl);
        extern(linkname: "SSL_shutdown") int shutdown(void* ssl);
        extern(linkname: "SSL_set_fd") int setFd(void* conn, int sock);
        extern(linkname: "SSL_connect") int connect(void* conn);
        extern(linkname: "SSL_accept") int accept(void* conn);

        extern(linkname: "TLSv1_method") void* methodTLS1();
        extern(linkname: "TLSv1_1_method") void* methodTLS1_1();
        extern(linkname: "TLSv1_2_method") void* methodTLS1_2();

        extern(linkname: "SSL_read") int read(void* ssl, void* buffer, int num);
        extern(linkname: "SSL_read_ex") int readEx(void* ssl, void* buf, int num, int* readbytes);
        extern(linkname: "SSL_write") int write(void* ssl, void* buffer, int num);
    }

    namespace std {
        namespace network {
            struct URL {
                std::string protocol;
                std::string host;
                std::string path;

                std::network::URL this(char* url) {
                  std::network::URL this;
                  this.protocol = std::string("");
                  this.host = std::string("");
                  this.path = std::string("/");

                  int p = 0;
                  int state = 0;
                  while(url[p] != '\0') {
                    if(state == 0) {
                        if(url[p] != ':') {
                            this.protocol.add(url[p]);
                            p += 1;
                        }
                        else {
                            p += 3; // skip the double slash
                            state += 1;
                        }
                    }
                    else {
                        if(state == 1) {
                            if(url[p] != '/') this.host.add(url[p]);
                            else state += 1;
                        }
                        else this.path.add(url[p]);
                        p += 1;
                    }
                  }
                } => this;

                std::network::URL this(std::string url) => std::network::URL(url.data);
            }
        }
    }

    namespace std {
        namespace network {
            bool isValidIPv4(char *ipAddress) {
                std::socket::sockaddr_in sa;
                int result = std::socket::inetPton(std::socket::AfInet, ipAddress, sa.&sin_addr);
            } => result > 0;

            std::string _determine_true_ip(std::string host, char* port) {
                if(std::network::isValidIPv4(host.data)) return = host;
                else {
                    std::socket::addrinfo* res;
                    bool found = false;
                    std::socket::getAddrInfo(host.data, port, cast(std::socket::addrinfo*)0, &res);

                    for(std::socket::addrinfo* i = res; i != cast(std::socket::addrinfo*)0; i=i.ai_next) {
                        char[46] str;
                        if(i.ai_addr.sa_family == std::socket::AfInet) {
                            std::socket::sockaddr_in* p = cast(std::socket::sockaddr_in*)i.ai_addr;
                            std::socket::inetNtop(std::socket::AfInet, p.&sin_addr, &str, 46);
                            return = std::string(&str);
                            found = true;
                            break;
                        }
                        // TODO: IPv6
                    }

                    std::socket::freeAddrInfo(res);

                    if(!found) return = host;
                }
            }

            struct Header {
                // TODO
            }

            struct Response {
                std::vector<std::network::Header> headers;
                std::string text;
                int status_code;
                int success;

                std::network::Response this {
                    std::network::Response this;
                } => this;
            }

            std::network::Response _do_http(std::network::URL url, char* method, std::string headers, std::string data, std::string port) {
                std::string reqline = std::sprint(method, " ", url.path, " HTTP/1.0\r\nHost: ", url.host, "\r\nConnection: close\r\n", headers, "\r\n", data);
                defer ~reqline;

                std::socket sock = std::socket();

                if(port == "") port = "80";

                std::string trueip = std::network::_determine_true_ip(url.host, port.data);
                defer ~trueip;

                if(sock.open(trueip.data, port.toInt(), std::socket::InAddrBroadcast) < 0) {
                    std::network::Response resp_fail_ssl = std::network::Response();
                    resp_fail_ssl.success = -5; // open failure
                    return = resp_fail_ssl;
                }
                else {
                    if(sock.connect() < 0) {
                        std::network::Response resp_fail_ssl = std::network::Response();
                        resp_fail_ssl.success = -6; // connect failure
                        return = resp_fail_ssl;
                    }
                    else {
                        sock.write(reqline.data);

                        std::string buffer = "";
                        char[512] char_buffer;

                        while(sock.read(&char_buffer, 512) > 0) {
                            buffer.appendC(&char_buffer);
                            std::memset(&char_buffer, 0, 512);
                        }

                        // parse data
                        std::network::Response resp = std::network::Response();
                        auto parts = buffer.split('\n');
                        auto headline = parts[0];
                        auto headline_parts = headline.split(' ');
                        auto status = headline_parts[1];
                        resp.status_code = status.toInt();

                        // TODO: read headers
                        int ip = 0; // point to first header actually
                        while(buffer.data[ip] != '\0') {
                            if(buffer.data[ip] == '\n') {
                                ip += 1;
                                if(buffer.data[ip] == '\r') {
                                    ip += 2;
                                    break;
                                }
                            } else ip += 1;
                        }

                        std::string resptext = buffer.substring(ip, buffer.length);
                        resp.text = resptext;
                        resp.success = 0;
                        return = resp;

                        // free up
                        ~parts;
                        ~headline_parts;
                        ~headline;
                        ~status;
                        sock.close();
                    }
                }
                ~port;
            }

            std::network::Response _do_http_secure(std::network::URL url, char* method, std::string headers, std::string data, std::string port) {
                std::string reqline = std::sprint(method, " ", url.path, " HTTP/1.0\r\nHost: ", url.host, "\r\nConnection: close\r\n", headers, "\r\n", data);
                defer ~reqline;

                void* ssl_ctx = ssl::ctxNew(ssl::methodTLS1_2());
                defer ssl::ctxFree(ssl_ctx);

                std::socket sock = std::socket();

                if(port == "") port = "443";

                std::string trueip = std::network::_determine_true_ip(url.host, port.data);
                defer ~trueip;

                if(sock.open(trueip.data, port.toInt(), std::socket::InAddrBroadcast) < 0) {
                    std::network::Response resp_fail_ssl = std::network::Response();
                    resp_fail_ssl.success = -5; // open failure
                    return = resp_fail_ssl;
                }
                else {
                    if(sock.connect() < 0) {
                        std::network::Response resp_fail_ssl = std::network::Response();
                        resp_fail_ssl.success = -6; // connect failure
                        return = resp_fail_ssl;
                    }
                    else {
                        // attach ssl to socket
                        void* conn = ssl::new(ssl_ctx);
                        ssl::setFd(conn, sock.fd);

                        // handshake ssl
                        int err = ssl::connect(conn);
                        if(err != 1) { 
                            std::network::Response resp_fail_ssl = std::network::Response();
                            resp_fail_ssl.success = -200; // handshake failed
                            return = resp_fail_ssl;
                        }
                        else {
                            ssl::write(conn, reqline.data, reqline.length);

                            std::string buffer = "";
                            defer ~buffer;

                            char[512] char_buffer;

                            while(ssl::read(conn, &char_buffer, 512) > 0) {
                                buffer.appendC(&char_buffer);
                                std::memset(&char_buffer, 0, 512);
                            }

                            // parse data
                            std::network::Response resp = std::network::Response();

                            std::vector<std::string> parts = buffer.split('\n');
                            defer ~parts;

                            auto headline = parts[0];
                            auto headline_parts = headline.split(' ');
                            auto status = headline_parts[1];
                            resp.status_code = status.toInt();

                            // TODO: read headers
                            int ip = 0; // point to first header actually
                            while(buffer.data[ip] != '\0') {
                                if(buffer.data[ip] == '\n') {
                                    ip += 1;
                                    if(buffer.data[ip] == '\r') {
                                        ip += 2;
                                        break;
                                    }
                                }
                                else ip += 1;
                            }

                            std::string resptext = buffer.substring(ip, buffer.length);
                            resp.text = resptext;
                            resp.success = 0;
                            return = resp;

                            // free up and closing a socket
                            ~headline_parts;
                            ~headline;
                            ~status;
                            sock.close();
                        }
                    }
                }
                ~port;
            }

            std::network::Response _http_wrap(std::network::URL url, char* method, std::string headers, std::string data, char* port) {
                if(url.protocol == "http") return = std::network::_do_http(url, method, headers, data, std::string(port));
                else if(url.protocol == "https") return = std::network::_do_http_secure(url, method, headers, data, std::string(port));
                else {
                    // -100 = invalid protocol
                    std::network::Response resp = std::network::Response();
                    resp.success = -100;
                    return = resp;
                }
            }

            std::network::Response get(std::network::URL url, std::string headers, char* port) => std::network::_http_wrap(url, "GET", headers, std::string(""), port);

            std::network::Response get(std::network::URL url, char* port) => std::network::get(url, std::string(""), port);

            std::network::Response post(std::network::URL url, std::string headers, char* port) => std::network::_http_wrap(url, "POST", headers, std::string(""), port);

            std::network::Response post(std::network::URL url, char* port) => std::network::post(url, std::string(""), port);
        }
    }
}