/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/vector> <std/cstring> <std/ascii> <std/utf8> <std/utf32>
import <std/thread> <std/strutil> <std/map> <std/hash> <std/math>
import <std/time>

namespace std {
    extern(private, linkname: "sscanf") int format(char* buff, char* fmt);

    (data: "data", length: "length") struct string {
        char* data;
        int length;
        int capacity;

        std::string this(char* str) {
            std::string this;

            if(str != null) {
                this.length = std::cstring::strlen(str);
                this.capacity = (this.length * 2) + 2;
                if(this.capacity <= 0) this.capacity = 2;
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i < this.length) {
                    this.data[i] = str[i];
                    i += 1;
                }
                this.data[i] = '\0';
            }
            else {
                this.length = 0;
                this.capacity = 2;
                this.data = std::malloc(this.capacity);
                this.data[0] = '\0';
            }
        } => this;

        std::string this(int n) {
            std::string this;
            this.length = 0;
            this.capacity = n + 1;
            if(this.capacity <= 0) this.capacity = 2;
            this.data = std::malloc(this.capacity);
            this.data[0] = '\0';
        } => this;

        (nochecks) void operator=(std::string* one, char* two) {one[0] = std::string(two);}

        void ~this {
            if(this.data != null) {
                std::free(this.data);
                this.data = null;
                this.length = 0;
                this.capacity = 0;
            }
        }

        void setValue(char* a) {
            if(a != null) {
                this.length = std::cstring::strlen(a);
                this.capacity = (this.length * 2) + 2;
                if(this.capacity <= 0) this.capacity = 2;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
                this.data[i] = '\0';
            }
            else {
                this.length = 0;
                this.capacity = 2;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);
                this.data[0] = '\0';
            }
        }

        (inline) void set(int index, char ch) {
            @if(__RAVE_RUNTIME_CHECKS) if((index >= 0) && (index < this.length)) this.data[index] = ch;
            @else this.data[index] = ch;
        }

        (inline) char at(int index) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if((index >= 0) && (index < this.length)) return = this.data[index];
                else return = '\0';
            }
            @else return = this.data[index];
        }

        (inline) bool isDeleted => (this.data == null);

        (inline) char* c => this.data;

        (inline) char toChar => this.data[0];
        (inline) cent toCent => std::cstring::stoc(this.data, this.length);
        (inline) long toLong => std::cstring::stol(this.data, this.length);
        (inline) int toInt => cast(int)this.toLong();
        (inline) double toDouble => std::cstring::stod(this.data, this.length);

        int indexOf(char c) => std::cstring::indexOf(this.data, c);

        int indexOf(char* s, uint begin) {
            @if(__RAVE_RUNTIME_CHECKS) if(begin > this.length) @return(-1);
            char* ptr = std::cstring::strstr(itop(char*, ptoi(this.data) + begin), s);
            if(ptr != null) return = ptoi(ptr) - ptoi(this.data);
            else return = -1;
        }

        (inline) int indexOf(char *s) => this.indexOf(s, 0);

        (inline) int indexOf(std::string s, uint begin) => this.indexOf(s.data, begin);

        (inline) int indexOf(std::string s) => this.indexOf(s.data);

        void add(char c) {
            if(this.data != null) {
                this.length += 1;

                if(this.length == this.capacity) {
                    this.data = std::realloc(this.data, this.capacity * 2);
                    this.capacity = this.capacity * 2;
                }

                this.data[this.length - 1] = c;
                this.data[this.length] = '\0';
            }
        }

        void append_NC(std::string str) {
            int i = 0;

            if((this.length + str.length) >= this.capacity) {
                this.data = std::realloc(this.data, this.capacity + str.length + 2);
                this.capacity = this.capacity + str.length + 2;
            }

            while(i < str.length) {
                this.length += 1;
                this.data[this.length - 1] = str.data[i];
                i += 1;
            }

            this.data[this.length] = '\0';
        }

        (inline) void append(std::string str) {
            if(this.data == null)
                @return();
        } => this.append_NC(str);

        void appendC_NC(char* cstr, int cstrlen) {
            int len = cstrlen;
            int i = 0;

            if((this.length + len) >= this.capacity) {
                int minTargetCap = this.capacity + len + 2;
                int shift = (31 - @ctlz32(minTargetCap, true));
                int targetCap = (minTargetCap >. shift) <. (shift + 1);
                this.data = std::realloc(this.data, targetCap);
                this.capacity = this.capacity + len + 2;
            }

            while(i < len) {
                this.length += 1;
                this.data[this.length - 1] = cstr[i];
                i += 1;
            }

            this.data[this.length] = '\0';
        }

        (inline) void appendC(char* cstr, int cstrlen) {
            if(this.data == null)
                @return();
        } => this.appendC_NC(cstr, cstrlen);

        (inline) void appendC(char* cstr) => this.appendC(cstr, std::cstring::strlen(cstr));

        (inline) std::string copy {
            std::string cp = std::string("");
            cp.append(this);
        } => cp;

        void replace(char c, char to) {
            int i = 0;
            while(i < this.length) {
                if(this.data[i] == c) this.data[i] = to;
                i += 1;
            }
        }

        std::string replace(char* from, int fromLen, char* to, int toLen) {
            return = "";

            int i = 0;
            while(i < this.length) {
                if((this.length - fromLen) <= i) {
                    for(int j=i; j<this.length; j++) return.add(this.data[j]);
                    break;
                }

                if(std::cstring::strncmp(itop(char*, ptoi(this.data) + i), from, fromLen)) {
                    return.appendC(to, toLen);
                    i += fromLen;
                    continue;
                }

                return.add(this.data[i]);
                i += 1;
            }
        }

        (inline) std::string replace(char* from, char* to) => this.replace(from, std::cstring::strlen(from), to, std::cstring::strlen(to));

        (inline) std::string replace(std::string from, std::string to) => this.replace(from.data, from.length, to.data, to.length);

        std::string substring(int from, int to) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if(((from >= 0) && (from < this.length)) && ((to >= 0) && (to < this.length))) @return(null);
            }

            return = "";
            int i = from;

            while(i < to) {
                return.add(this.data[i]);
                i += 1;
            }
        }

        std::string operator+(std::string one, std::string two) {
            std::string third = "";
            for(int i=0; i<one.length; i+=1) third.add(one.data[i]);
            for(int i=0; i<two.length; i+=1) third.add(two.data[i]);
        } => third;

        bool operator==(std::string one, std::string two) {
            return = true;
            if(one.length != two.length) return = false;
            else {
                for(int i=0; i<one.length; i+=1) {
                    if(one.data[i] != two.data[i]) {
                        return = false;
                        break;
                    }
                }
            }
        }

        bool operator==(std::string one, char* two) {
            return = true;
            for(int i=0; i<one.length; i+=1) {
                if(one.data[i] != two[i]) {
                    return = false;
                    break;
                }
            }
        }

        std::vector<std::string> split(char ch) {
            return = std::vector<std::string>();

            int idx = 0;
            std::string buffer = "";
            while(idx < this.length) {
                if(this.data[idx] != ch) {
                    buffer.add(this.data[idx]);
                    idx += 1;
                }
                else {
                    if(buffer.length > 0) return.add(buffer.copy());
                    buffer.length = 0;
                    idx += 1;
                }
            }
            if(buffer.length > 0) return.add(buffer.copy());
            ~buffer;
        }

        std::string ltrim {
            int idx = 0;
            while((idx < this.length) && (std::ascii::isSpace(this.data[idx]))) idx += 1;
        } => this.substring(idx, this.length);

        std::string rtrim {
            int idx = this.length - 1;
            while(std::ascii::isSpace(this.data[idx])) idx -= 1;
        } => this.substring(0, idx + 1);

        (inline) std::string trim {
            int idxL = 0;
            int idxR = this.length - 1;
            while((idxL < this.length) && (std::ascii::isSpace(this.data[idxL]))) idxL += 1;
            while(std::ascii::isSpace(this.data[idxR])) idxR -= 1;
        } => this.substring(idxL, idxR + 1);

        std::string insert(int pos, char* str) {
            std::string buffer = "";
            int i = 0;
            while(i < pos) {
                buffer.add(this.data[i]);
                i += 1;
            }
            buffer.appendC(str);
            while(i < this.length) {
                buffer.add(this.data[i]);
                i += 1;
            }
        } => buffer;

        int hash => std::hash::crc32(this.data, this.length);
    }

    namespace string {
        (inline) std::string fromNumber(cent n) {
            char[41] tempBuffer;
            std::cstring::ctos(n, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromUNumber(ucent n) {
            char[40] tempBuffer;
            std::cstring::uctos(n, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromNumber(long n) {
            char[24] tempBuffer;
            std::cstring::ltos(n, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromUNumber(ulong n) {
            char[21] tempBuffer;
            std::cstring::ultos(n, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromNumber(int n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(short n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(char n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(bool n) => std::string::fromNumber(cast(long)n);

        (inline) std::string fromUNumber(uint n) => std::string::fromUNumber(cast(ulong)n);
        (inline) std::string fromUNumber(ushort n) => std::string::fromUNumber(cast(ulong)n);
        (inline) std::string fromUNumber(uchar n) => std::string::fromUNumber(cast(ulong)n);

        (inline) std::string fromDoubleN(double n, int precision) {
            char[24] tempBuffer;
            std::cstring::dtos(n, precision, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromDouble(double n) => std::string::fromDoubleN(n, 8);

        (inline) std::string fromFloatN(float n, int precision) => std::string::fromDoubleN(cast(double)n, precision);
        (inline) std::string fromFloat(float n) => std::string::fromFloatN(n, 7);
    }

    (ctargs) void sprintBuffer {
        std::string* resultPtr = @getCurrArg(std::string*);
        std::string result = resultPtr[0];

        @skipArg();

        char[41] nBuffer;

        @foreachArgs() {
            @if(@getCurrArgType() == double) {
                if(std::math::isNAN(@getCurrArg(double))) result.appendC("NAN");
                else {
                    std::memset(&nBuffer, 0, 41);
                    std::cstring::dtos(@getCurrArg(double), 16, &nBuffer);
                    result.appendC(cast(char*)&nBuffer);
                }
            }

            @if(@getCurrArgType() == float) {
                if(std::math::isNAN(@getCurrArg(float))) result.appendC("NAN");
                else {
                    std::memset(&nBuffer, 0, 41);
                    std::cstring::dtos(@getCurrArg(double), 7, &nBuffer);
                    result.appendC(cast(char*)&nBuffer);
                }
            }

            @if(@getCurrArgType() == half) {
                if(std::math::isNAN(@getCurrArg(half))) result.appendC("NAN");
                else {
                    std::memset(&nBuffer, 0, 41);
                    std::cstring::dtos(@getCurrArg(double), 6, &nBuffer);
                    result.appendC(cast(char*)&nBuffer);
                }
            }

            @if(@getCurrArgType() == bool) result.appendC(std::cstring::fromBool(@getCurrArg(bool)));

            @if(@getCurrArgType() == char) result.add(@getCurrArg(char));

            @if((@getCurrArgType() == short) || (@getCurrArgType() == int) || (@getCurrArgType() == long)) {
                std::memset(&nBuffer, 0, 41);
                std::cstring::ltos(@getCurrArg(long), cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }

            @if((@getCurrArgType() == ushort) || (@getCurrArgType() == uint) || (@getCurrArgType() == ulong)) {
                std::memset(&nBuffer, 0, 41);
                std::cstring::ultos(cast(ulong)(@getCurrArg(long)), cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }

            @if(@getCurrArgType() == cent) {
                std::memset(&nBuffer, 0, 41);
                std::cstring::ctos(@getCurrArg(cent), cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }

            @if(@getCurrArgType() == ucent) {
                std::memset(&nBuffer, 0, 41);
                std::cstring::uctos(@getCurrArg(ucent), cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }

            @if(@getCurrArgType() == char*) {
                char* str = @getCurrArg(char*);
                if(str != null) result.appendC(str);
                else result.appendC("null");
            }

            @if(@getCurrArgType() == int*) {
                uint* utf8Text = @getCurrArg(uint*);
                if(utf8Text == null) result.appendC("null");
                else for(int i=0; utf8Text[i] != '\0'; i+=1) {
                    char[4] buf;
                    int n = std::utf32::encode(utf8Text[i], &buf[0]);
                    if(n == 1) result.add(buf[0]);
                    else if(n == 2) {
                        result.add(buf[0]);
                        result.add(buf[1]);
                    }
                    else if(n == 3) {
                        result.add(buf[0]);
                        result.add(buf[1]);
                        result.add(buf[2]);
                    }
                    else if(n == 4) {
                        result.add(buf[0]);
                        result.add(buf[1]);
                        result.add(buf[2]);
                        result.add(buf[3]);
                    }
                }
            }

            @if(@tEquals(@getCurrArgType(), std::u8string)) {
                std::u8string u8s = @getCurrArg(std::u8string);
                if(u8s.data != null) result.appendC(u8s.data);
                else result.appendC("null");
            }

            @if(@tEquals(@getCurrArgType(), std::string)) {
                std::string s = @getCurrArg(std::string);
                if(s.data != null) result.append(s);
                else result.appendC("null");
            }

            @if(@tEquals(@getCurrArgType(), std::time)) {
                std::time tp = @getCurrArg(std::time);
                std::cstring::ltos(tp.seconds, cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
                result.appendC(".");
                std::cstring::ltos(tp.microseconds, cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }
        }

        resultPtr[0] = result;
    }

    std::spinlock __sprintBufferSL;
    std::string __sprintBuffer;
    bool sbInitialized = false;

    (ctargs) std::string gsprint {
        std::__sprintBufferSL.lock();

        if(!std::sbInitialized) {
            std::__sprintBuffer = std::string(128);
            std::sbInitialized = true;
        }
        else std::__sprintBuffer.length = 0;

        @callWithBeforeArgs(std::sprintBuffer, &std::__sprintBuffer);

        std::__sprintBufferSL.unlock();
    } => std::__sprintBuffer;

    (inline, ctargs) std::string sprint {
        std::string result = "";
        @callWithBeforeArgs(std::sprintBuffer, &result);
    } => result;
}
