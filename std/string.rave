/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/vector> <std/cstring> <std/ascii> <std/utf>
import <std/thread> <std/map> <std/hash> <std/math>

namespace std {
    extern(private, linkname: "sscanf") int format(char* buff, char* fmt);

    (data: "data", length: "length") struct string {
        char* data = null;
        usize length;
        usize capacity;

        std::string this(char* str) {
            std::string this;

            if (str != null) {
                this.length = std::cstring::strlen(str);
                this.capacity = (this.length * 2) + 2;
                if (this.capacity <= 0) this.capacity = 2;
                this.data = std::malloc(this.capacity);

                usize i = 0;
                while (i < this.length) {
                    this.data[i] = str[i];
                    i += 1;
                }

                this.data[i] = '\0';
            }
            else {
                this.length = 0;
                this.capacity = 2;
                this.data = std::malloc(this.capacity);
                this.data[0] = '\0';
            }
        } => this;

        std::string this(usize n) {
            std::string this;
            this.length = 0;
            this.capacity = n + 1;
            if (this.capacity <= 0) this.capacity = 2;
            this.data = std::malloc(this.capacity);
            this.data[0] = '\0';
        } => this;

        void setValue(char* a) {
            if (data == null) {
                if (a != null) {
                    this.length = std::cstring::strlen(a);
                    this.capacity = (this.length * 2) + 2;
                    if (this.capacity <= 0) this.capacity = 2;
                    if (this.data != null) std::free(this.data);
                    this.data = std::malloc(this.capacity);

                    usize i = 0;
                    while (i < this.length) {
                        this.data[i] = a[i];
                        i += 1;
                    }

                    this.data[i] = '\0';
                }
                else {
                    this.length = 0;
                    this.capacity = 2;
                    if (this.data != null) std::free(this.data);
                    this.data = std::malloc(this.capacity);
                    this.data[0] = '\0';
                }
            }
            else {
                this.length = std::cstring::strlen(a);

                if (this.capacity < this.length) {
                    this.capacity = (this.length * 2) + 2;
                    this.data = std::realloc(this.data, this.capacity);
                }

                usize i = 0;
                while (i < this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }

                this.data[i] = '\0';
            }
        }

        (nochecks) void operator=(std::string* one, char* two) {one.setValue(two);}

        void ~this {
            if (this.data != null) {
                std::free(this.data);
                this.data = null;
                this.length = 0;
                this.capacity = 0;
            }
        }

        (inline) void set(usize index, char ch) {
            @if (__RAVE_RUNTIME_CHECKS) if (index < this.length) this.data[index] = ch;
            @else this.data[index] = ch;
        }

        (inline) char at(usize index) {
            @if (__RAVE_RUNTIME_CHECKS) {
                if (index < this.length) return = this.data[index];
                else return = '\0';
            }
            @else return = this.data[index];
        }

        (inline) bool isDeleted => (this.data == null);

        (inline) char* c => this.data;

        (inline) char toChar => this.data[0];
        (inline) cent toCent => std::cstring::stoc(std::cstring(this.data, this.length));
        (inline) ucent toUcent => std::cstring::stouc(std::cstring(this.data, this.length));
        (inline) long toLong => std::cstring::stol(std::cstring(this.data, this.length));
        (inline) ulong toUlong => std::cstring::stoul(std::cstring(this.data, this.length));
        (inline) int toInt => cast(int)this.toLong();
        (inline) uint toUint => cast(uint)this.toUlong();
        (inline) double toDouble => std::cstring::stod(std::cstring(this.data, this.length));

        usize indexOf(char c) => std::cstring::indexOf(this.data, c);

        usize indexOf(char* s, usize begin) {
            @if (__RAVE_RUNTIME_CHECKS) if (begin > this.length) @return(-1);
            char* ptr = std::cstring::strstr(itop(char*, ptoi(this.data) + begin), s);
            if (ptr != null) return = ptoi(ptr) - ptoi(this.data);
            else return = -1;
        }

        (inline) usize indexOf(char* s) => this.indexOf(s, 0);

        (inline) usize indexOf(std::string s, usize begin) => this.indexOf(s.data, begin);

        (inline) usize indexOf(std::string s) => this.indexOf(s.data);
 
        void add(char c) {
            @if (__RAVE_RUNTIME_CHECKS) if (this.data == null) @return();
            this.length += 1;

            if (this.length == this.capacity) {
                this.capacity = this.capacity * 2;
                this.data = std::realloc(this.data, this.capacity);
            }

            this.data[this.length - 1] = c;
            this.data[this.length] = '\0';
        }

        void appendC(char* cstr, usize cstrlen) {
            @if (__RAVE_RUNTIME_CHECKS) if (this.data == null) @return();

            if ((this.length + cstrlen) >= this.capacity) {
                usize minTargetCap = this.capacity + cstrlen + 2;
                usize shift = ((sizeof(usize) * 8) - @ctlz(minTargetCap, true) - 1);
                usize targetCap = (minTargetCap >. shift) <. (shift + 1);

                this.data = std::realloc(this.data, targetCap);
                this.capacity = targetCap;
            }

            for (usize i=0; i<cstrlen; i++) {
                this.data[this.length] = cstr[i];
                this.length += 1;
            }

            this.data[this.length] = '\0';
        }

        (inline, explicit) void appendC(std::cstring cstr) => this.appendC(cstr.data, cstr.length);

        (inline) void appendC(char* cstr) => this.appendC(cstr, std::cstring::strlen(cstr));

        (inline) void append(std::string str) => this.appendC(str.data, str.length);

        (inline) std::string copy {
            return = std::string("");
            return.append(this);
        }

        void replace(char c, char to) {
            usize i = 0;
            while (i < this.length) {
                if (this.data[i] == c) this.data[i] = to;
                i += 1;
            }
        }

        std::string replace(char* from, usize fromLen, char* to, usize toLen) {
            return = "";

            usize i = 0;
            while (i < this.length) {
                if (length <= (i + fromLen)) {
                    for (usize j=i; j<this.length; j++) return.add(this.data[j]);
                    break;
                }

                if (std::memcmp(itop(char*, ptoi(this.data) + i), from, fromLen)) {
                    return.appendC(to, toLen);
                    i += fromLen;
                    continue;
                }

                return.add(this.data[i]);
                i += 1;
            }
        }

        (inline) std::string replace(char* from, char* to) => this.replace(from, std::cstring::strlen(from), to, std::cstring::strlen(to));

        (inline) std::string replace(std::string from, std::string to) => this.replace(from.data, from.length, to.data, to.length);

        std::string substring(usize from, usize to) {
            @if (__RAVE_RUNTIME_CHECKS) {
                if ((from >= this.length) || (to >= this.length)) @return(null);
            }

            return = "";
            usize i = from;

            while (i < to) {
                return.add(this.data[i]);
                i += 1;
            }
        }

        std::string operator+(std::string one, std::string two) {
            return = "";
            return.append(one);
            return.append(two);
        }

        bool operator==(std::string one, std::string two) {
            return = true;
            if (one.length != two.length) return = false;
            else {
                for (usize i=0; i<one.length; i+=1) {
                    if (one.data[i] != two.data[i]) {
                        return = false;
                        break;
                    }
                }
            }
        }

        bool operator==(std::string one, char* two) {
            return = true;
            for (usize i=0; i<one.length; i+=1) {
                if (one.data[i] != two[i]) {
                    return = false;
                    break;
                }
            }
        }

        std::vector<std::string> split(char ch) {
            return = std::vector<std::string>();

            usize idx = 0;
            std::string buffer = "";

            while (idx < this.length) {
                if (this.data[idx] != ch) {
                    buffer.add(this.data[idx]);
                    idx += 1;
                }
                else {
                    if (buffer.length > 0) return.add(buffer.copy());
                    buffer.length = 0;
                    idx += 1;
                }
            }

            if (buffer.length > 0) return.add(buffer.copy());
            ~buffer;
        }

        std::string ltrim {
            usize idx = 0;
            while ((idx < this.length) && (std::ascii::isSpace(this.data[idx]))) idx += 1;
        } => this.substring(idx, this.length);

        std::string rtrim {
            usize idx = 0;
            if (length > 0) idx = length - 1;

            while (std::ascii::isSpace(this.data[idx])) idx -= 1;
        } => this.substring(0, idx + 1);

        (inline) std::string trim {
            usize idxL = 0;
            usize idxR = 0;

            if (length > 0) idxR = length - 1;

            while ((idxL < this.length) && (std::ascii::isSpace(this.data[idxL]))) idxL += 1;
            while (std::ascii::isSpace(this.data[idxR])) idxR -= 1;
        } => this.substring(idxL, idxR + 1);

        std::string insert(usize pos, char* str) {
            std::string buffer = "";
            usize i = 0;
            while (i < pos) {
                buffer.add(this.data[i]);
                i += 1;
            }
            buffer.appendC(str);
            while (i < this.length) {
                buffer.add(this.data[i]);
                i += 1;
            }
        } => buffer;

        uint hash => std::hash::crc32(this.data, this.length);
    }

    namespace string {
        (inline) std::string fromNumber(cent n) {
            char[41] tempBuffer;
            std::cstring::ctos(n, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromUNumber(ucent n) {
            char[40] tempBuffer;
            std::cstring::uctos(n, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromNumber(long n) {
            char[24] tempBuffer;
            std::cstring::ltos(n, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromUNumber(ulong n) {
            char[21] tempBuffer;
            std::cstring::ultos(n, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromNumber(int n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(short n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(char n) => std::string::fromNumber(cast(long)n);
        (inline) std::string fromNumber(bool n) => std::string::fromNumber(cast(long)n);

        (inline) std::string fromUNumber(uint n) => std::string::fromUNumber(cast(ulong)n);
        (inline) std::string fromUNumber(ushort n) => std::string::fromUNumber(cast(ulong)n);
        (inline) std::string fromUNumber(uchar n) => std::string::fromUNumber(cast(ulong)n);

        (inline) std::string fromDoubleN(double n, int precision) {
            char[24] tempBuffer;
            std::cstring::dtos(n, precision, &tempBuffer);
            std::string sNumber = std::string(&tempBuffer);
        } => sNumber;

        (inline) std::string fromDouble(double n) => std::string::fromDoubleN(n, 8);

        (inline) std::string fromFloatN(float n, int precision) => std::string::fromDoubleN(cast(double)n, precision);
        (inline) std::string fromFloat(float n) => std::string::fromFloatN(n, 7);
    }

    (private, ctargs) void sprintBuffer {
        std::string* resultPtr = @getCurrArg(std::string*);
        std::string result = resultPtr[0];

        @skipArg();

        char[41] nBuffer;

        @foreachArgs() {
            @if (@getCurrArgType() == double) {
                if (std::math::isNAN(@getCurrArg(double))) result.appendC("NAN", 3);
                else {
                    std::cstring::dtos(@getCurrArg(double), 16, &nBuffer);
                    result.appendC(cast(char*)&nBuffer);
                }
            }

            @if (@getCurrArgType() == float) {
                if (std::math::isNAN(@getCurrArg(float))) result.appendC("NAN", 3);
                else {
                    std::cstring::dtos(@getCurrArg(double), 7, &nBuffer);
                    result.appendC(cast(char*)&nBuffer);
                }
            }

            @if (@getCurrArgType() == half) {
                if (std::math::isNAN(@getCurrArg(half))) result.appendC("NAN", 3);
                else {
                    std::cstring::dtos(@getCurrArg(double), 6, &nBuffer);
                    result.appendC(cast(char*)&nBuffer);
                }
            }

            @if (@getCurrArgType() == bool) result.appendC(std::cstring::fromBool(@getCurrArg(bool)));

            @if (@getCurrArgType() == char) result.add(@getCurrArg(char));

            @if ((@getCurrArgType() == short) || (@getCurrArgType() == int) || (@getCurrArgType() == long)) {
                std::cstring::ltos(@getCurrArg(long), cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }

            @if ((@getCurrArgType() == ushort) || (@getCurrArgType() == uint) || (@getCurrArgType() == ulong)) {
                std::cstring::ultos(@getCurrArg(ulong), cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }

            @if (@getCurrArgType() == cent) {
                std::cstring::ctos(@getCurrArg(cent), cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }

            @if (@getCurrArgType() == ucent) {
                std::cstring::uctos(@getCurrArg(ucent), cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }

            @if ((@getCurrArgType() == char*) || (@getCurrArgType() == uchar*) || (@getCurrArgType() == void*)) {
                char* str = @getCurrArg(char*);
                if (str != null) result.appendC(str);
                else result.appendC("null", 4);
            }

            @if (@getCurrArgType() == std::string) {
                std::string s = @getCurrArg(std::string);
                if (s.data != null) result.append(s);
                else result.appendC("null", 4);
            }

            @if (@getCurrArgType() == std::time) {
                std::time tp = @getCurrArg(std::time);

                std::cstring::ltos(tp.seconds, cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);

                result.add('.');

                std::cstring::ltos(tp.milliseconds, cast(char*)&nBuffer);
                result.appendC(cast(char*)&nBuffer);
            }

            @if (@getCurrArgType() == std::cstring) {
                std::cstring cs = @getCurrArg(std::cstring);
                if (cs.data != null) result.appendC(cs.data, cs.length);
                else result.appendC("null", 4);
            }
        }
        
        resultPtr[0] = result;
    }

    std::spinlock __sprintBufferSL;
    std::string __sprintBuffer;
    bool sbInitialized = false;

    (private, ctargs) std::string gsprint {
        std::__sprintBufferSL.lock();

        if (!std::sbInitialized) {
            std::__sprintBuffer = std::string(128);
            std::sbInitialized = true;
        }
        else std::__sprintBuffer.length = 0;

        @callWithBeforeArgs(std::sprintBuffer, &std::__sprintBuffer);

        std::__sprintBufferSL.unlock();
    } => std::__sprintBuffer;

    (private, inline, ctargs) std::string sprint {
        std::string result = "";
        @callWithBeforeArgs(std::sprintBuffer, &result);
    } => result;
}
