/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/process> <std/map>

@if (__RAVE_OS != "WINDOWS") {
    import <std/pthread>

    namespace std {
        struct thread {
            ulong id;
    
            std::thread this {
                std::thread this;
                this.id = 0;
            } => this;
    
            void run(int(void*) fn, void* argument) {
                pthread::create(this.&id, cast(pthread::attribute*)null, cast(void*(void*))fn, argument);
            }
    
            int join => pthread::join(this.id, cast(void**)null);

            uint hash => (9437 * cast(uint)(this.id));
        }

        namespace thread {
            (inline) void exit(int value) => pthread::exit(cast(void*)value);
            (inline) void exit => std::thread::exit(0);
        }
    }
}
@else {
    namespace std {
        namespace thread {
            extern(linkname: "CreateThread") void* __CreateThread(void* attributes, uint stackSize, int(void*) fn, void* argument, uint flags, uint* threadId);
            extern(linkname: "WaitForSingleObject") int __WaitForSingleObject(void* thread, uint ms);

            extern(linkname: "ExitThread") void exit(int value);
            (inline) void exit => std::thread::exit(0);
        }

        struct thread {
            uint id;
            void* __ptr;

            std::thread this {
                std::thread this;
                this.id = 0;
                this.__ptr = null;
            } => this;

            void run(int(void*) fn, void* argument) {
                this.__ptr = std::thread::__CreateThread(null, 0, fn, argument, 0, this.&id);
            }

            int join => std::thread::__WaitForSingleObject(this.__ptr, -1);

            int hash => (9437 * this.id);
        }
    }
};

@if (__RAVE_OS == "LINUX") {
    namespace std {
        namespace thread {
            alias cloneVM = 256;
            alias cloneFS = 512;
            alias cloneFiles = 1024;
            alias cloneSighand = 2048;
            alias cloneThread = 65536;
            alias cloneSysvsem = 262144;
            alias cloneSetTLS = 524288;
            alias cloneParentSetTID = 1048576;
            alias cloneChildClearTID = 2097152;

            (inline) int getCurrentID => cast(int)std::syscall(std::sysctable::GetTID);
            (inline) int __wait4(int pid, int* wstatus, int options, void* rusage) => cast(int)std::syscall(std::sysctable::Wait4, pid, wstatus, options, rusage);
            (inline) int __waitpid(int pid, int* status, int options) => std::thread::__wait4(pid, status, options, null);
        }
    }
}

namespace std {
    namespace thread {
        namespace spinlock {
            (inline) void lock(int* sl) {
                while (@atomicTAS(sl, 1) == 1) {
                    @if ((__RAVE_PLATFORM == "X86") || (__RAVE_PLATFORM == "X86_64")) asm("pause");
                }
            }

            (inline) void unlock(int* sl) => @atomicClear(sl);
        }
    }

    struct spinlock {
        int value;

        (inline) void lock => std::thread::spinlock::lock(this.&value);

        (inline) void unlock => std::thread::spinlock::unlock(this.&value);
    }
}