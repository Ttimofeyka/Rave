/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/hash>

namespace std {
    namespace hashmap {
        struct entry<KE, VE> {
            KE key;
            VE value;
            std::hashmap::entry<KE, VE>* next;
        }

        struct iterator<KI, VI> {
            uint currentHighest = 0;
            std::hashmap::entry<KI, VI>* current = null;
        }
    }

    (conditions: [K != void, V != void]) struct hashmap<K, V> {
        std::hashmap::entry<K, V>** table;
        uint length;
        uint mapSize;

        std::hashmap<K, V> this {
            std::hashmap<K, V> this;
            this.mapSize = 128;
            this.length = 0;
            this.table = cast(std::hashmap::entry<K, V>**)std::malloc(sizeof(std::hashmap::entry<K, V>*) * this.mapSize);
            for(int i=0; i<this.mapSize; i++) this.table[i] = null;
        } => this;

        std::hashmap<K, V> this(uint mapSize) {
            std::hashmap<K, V> this;
            this.mapSize = mapSize;
            this.length = 0;
            this.table = cast(std::hashmap::entry<K, V>**)std::malloc(sizeof(std::hashmap::entry<K, V>*) * mapSize);
            for(uint i=0; i<mapSize; i++) this.table[i] = null;
        } => this;

        void set(K key, V value) {
            // if(length > (mapSize * 0.75))
            if(length > (mapSize >. 1) + (mapSize >. 2)) {
                // Reconstruct the map
                uint oldMapSize = mapSize;
                mapSize = mapSize * 2;

                std::hashmap::entry<K, V>** newTable = cast(std::hashmap::entry<K, V>**)std::malloc(sizeof(std::hashmap::entry<K, V>*) * mapSize);
                for(uint i=0; i<mapSize; i++) newTable[i] = null;

                for(uint i=0; i<oldMapSize; i++) {
                    std::hashmap::entry<K, V>* current = table[i];

                    while(current != null) {
                        defer std::free(current);

                        @if(@hasMethod(K, hash)) uint index = current.key.hash() % mapSize;
                        @else uint index = std::hash::crc32(cast(void*)current.&key, sizeof(K)) % mapSize;

                        std::hashmap::entry<K, V>* entry = newTable[index];
                        while(entry != null) {
                            if(entry.next == null) break;
                            else entry = entry.next;
                        }

                        if(entry == null) {
                            newTable[index] = cast(std::hashmap::entry<K, V>*)std::malloc(sizeof(std::hashmap::entry<K, V>));
                            newTable[index].key = current.key;
                            newTable[index].value = current.value;
                            newTable[index].next = null;
                        }
                        else {
                            entry.next = cast(std::hashmap::entry<K, V>*)std::malloc(sizeof(std::hashmap::entry<K, V>));
                            entry.next.key = current.key;
                            entry.next.value = current.value;
                            entry.next.next = null;
                        }

                        current = current.next;
                    }
                }

                std::free(table);
                table = newTable;
            }

            @if(@hasMethod(K, hash)) uint index = key.hash() % mapSize;
            @else uint index = std::hash::crc32(cast(void*)&key, sizeof(K)) % mapSize;

            std::hashmap::entry<K, V>* entry = table[index];
            bool setted = false;

            while(entry != null) {
                if(key == entry.key) {
                    entry.value = value;
                    setted = true;
                    break;
                }

                entry = entry.next;
            }

            if(!setted) {
                if(table[index] == null) {
                    table[index] = cast(std::hashmap::entry<K, V>*)std::malloc(sizeof(std::hashmap::entry<K, V>));
                    table[index].key = key;
                    table[index].value = value;
                    table[index].next = null;
                }
                else {
                    std::hashmap::entry<K, V>* previous = null;
                    entry = table[index];

                    while(entry != null) {
                        previous = entry;
                        entry = entry.next;
                    }

                    entry = cast(std::hashmap::entry<K, V>*)std::malloc(sizeof(std::hashmap::entry<K, V>));
                    entry.key = key;
                    entry.value = value;
                    entry.next = null;
                    previous.next = entry;
                }

                length += 1;
            }
        }

        std::hashmap::entry<K, V>* find(K key) {
            return = cast(std::hashmap::entry<K, V>*)null;

            @if(@hasMethod(K, hash)) uint index = key.hash() % mapSize;
            @else uint index = std::hash::crc32(cast(void*)&key, sizeof(K)) % mapSize;

            std::hashmap::entry<K, V>* entry = table[index];
            while(entry != null) {
                if(key == entry.key) {
                    return = entry;
                    break;
                }
                else entry = entry.next;
            }
        }

        (inline) bool contains(K key) => find(key) != cast(std::hashmap::entry<K, V>*)null;

        (inline) V get(K key) {
            std::hashmap::entry<K, V>* kv = find(key);

            if(kv == cast(std::hashmap::entry<K, V>*)null) return = cast(V)null;
            else return = kv.value;
        }

        bool remove(K key) {
            return = false;

            @if(@hasMethod(K, hash)) uint index = key.hash() % mapSize;
            @else uint index = std::hash::crc32(cast(void*)&key, sizeof(K)) % mapSize;

            std::hashmap::entry<K, V>* entry = table[index];
            std::hashmap::entry<K, V>* prev = null;

            while(entry != null) {
                if(key == entry.key) {
                    entry.key = cast(K)null;
                    entry.value = cast(V)null;
                    length -= 1;
                    return = true;
                    break;
                }
                else {
                    prev = entry;
                    entry = entry.next;
                }
            }
        }

        void clear {
            for(int i=0; i<mapSize; i++) {
                std::hashmap::entry<K, V>* entry = table[i];
                std::hashmap::entry<K, V>* old = null;

                while(entry != null) {
                    old = entry;
                    entry = entry.next;
                    std::free(cast(void*)old);
                }

                table[i] = null;
            }

            length = 0;
        }

        void next(std::hashmap::iterator<K, V>* iterator) {
            if(length > 0) {
                if(iterator.current == null) {
                    for(uint i=0; i<mapSize; i++) {
                        if(table[i] != null) {
                            iterator.current = table[i];
                            iterator.currentHighest = i;
                            break;
                        }
                    }
                }
                else {
                    if(iterator.current.next != null) iterator.current = iterator.current.next;
                    else {
                        iterator.currentHighest += 1;

                        if(iterator.currentHighest >= mapSize) {
                            iterator.current = null;
                            iterator.currentHighest = 0;
                        }
                        else {
                            for(uint i=iterator.currentHighest; i<mapSize; i++) {
                                if(table[i] != null) {
                                    iterator.current = table[i];
                                    iterator.currentHighest = i;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }

        void ~this {
            if(this.table != null) {
                defer std::free(cast(void*)(this.table));
                for(int i=0; i<this.mapSize; i++) {
                    std::hashmap::entry<K, V>* entry = this.table[i];
                    std::hashmap::entry<K, V>* old = null;

                    while(entry != null) {
                        old = entry;
                        entry = entry.next;
                        std::free(cast(void*)old);
                    }
                }

                this.table = null;
            }
        }
    }
}