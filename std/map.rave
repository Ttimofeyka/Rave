/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/hash>

namespace std {
    namespace hashmap {
        struct Entry<KE, VE> {
            KE key;
            VE value;
            std::hashmap::Entry<KE, VE>* next;
        }
    }

    (conditions: [K != void, V != void]) struct hashmap<K, V> {
        std::hashmap::Entry<K, V>** table;
        int length;
        int mapSize;

        std::hashmap<K, V> this {
            std::hashmap<K, V> this;
            this.mapSize = 128;
            this.length = 0;
            this.table = cast(std::hashmap::Entry<K, V>**)std::malloc(sizeof(std::hashmap::Entry<K, V>*) * this.mapSize);
            for(int i=0; i<this.mapSize; i++) this.table[i] = null;
        } => this;

        std::hashmap<K, V> this(int mapSize) {
            std::hashmap<K, V> this;
            this.mapSize = mapSize;
            this.length = 0;
            this.table = cast(std::hashmap::Entry<K, V>**)std::malloc(sizeof(std::hashmap::Entry<K, V>*) * mapSize);
            for(int i=0; i<mapSize; i++) this.table[i] = null;
        } => this;

        void set(K key, V value) {
            // if(length > (mapSize * 0.75))
            if(length > (mapSize >. 1) + (mapSize >. 2)) {
                table = cast(std::hashmap::Entry<K, V>**)std::realloc(table,sizeof(std::hashmap::Entry<K, V>*) * (mapSize * 2));
                for(int i=mapSize; i<(mapSize * 2); i++) table[i] = null;
                mapSize = mapSize * 2;
            }

            @if(@hasMethod(K, hash)) int index = key.hash() % mapSize;
            @else int index = std::hash::crc32(cast(void*)&key, sizeof(K)) % mapSize;

            if(index < 0) index = -index;

            std::hashmap::Entry<K, V>* entry = table[index];
            bool setted = false;
            while(entry != null) {
                if(key == entry.key) {
                    entry.value = value;
                    setted = true;
                    break;
                }
                entry = entry.next;
            }

            if(!setted) {
                if(table[index] == null) {
                    table[index] = cast(std::hashmap::Entry<K, V>*)std::malloc(sizeof(std::hashmap::Entry<K, V>));
                    table[index].key = key;
                    table[index].value = value;
                    table[index].next = null;
                }
                else {
                    std::hashmap::Entry<K, V>* previous = null;
                    entry = table[index];
                    while(entry != null) {
                        previous = entry;
                        entry = entry.next;
                    }
                    entry = cast(std::hashmap::Entry<K, V>*)std::malloc(sizeof(std::hashmap::Entry<K, V>));
                    entry.key = key;
                    entry.value = value;
                    entry.next = null;
                    previous.next = entry;
                }
                length += 1;
            }
        }

        std::hashmap::Entry<K, V>* find(K key) {
            return = cast(std::hashmap::Entry<K, V>*)null;

            @if(@hasMethod(K, hash)) int index = key.hash() % mapSize;
            @else int index = std::hash::crc32(cast(void*)&key, sizeof(K)) % mapSize;

            if(index < 0) index = -index;

            std::hashmap::Entry<K, V>* entry = table[index];
            while(entry != null) {
                if(key == entry.key) {
                    return = entry;
                    break;
                }
                else entry = entry.next;
            }
        }

        (inline) bool contains(K key) => find(key) != cast(std::hashmap::Entry<K, V>*)null;

        (inline) V get(K key) {
            std::hashmap::Entry<K, V>* kv = find(key);

            if(kv == cast(std::hashmap::Entry<K, V>*)null) return = cast(V)null;
            else return = kv.value;
        }

        bool remove(K key) {
            return = false;

            @if(@hasMethod(K, hash)) int index = key.hash() % mapSize;
            @else int index = std::hash::crc32(cast(void*)&key, sizeof(K)) % mapSize;

            if(index < 0) index = -index;

            std::hashmap::Entry<K, V>* entry = table[index];
            std::hashmap::Entry<K, V>* prev = null;

            while(entry != null) {
                if(key == entry.key) {
                    entry.key = cast(K)null;
                    entry.value = cast(V)null;
                    length -= 1;
                    return = true;
                    break;
                }
                else {
                    prev = entry;
                    entry = entry.next;
                }
            }
        }

        void clear {
            for(int i=0; i<mapSize; i++) {
                std::hashmap::Entry<K, V>* entry = table[i];
                std::hashmap::Entry<K, V>* old = null;

                while(entry != null) {
                    old = entry;
                    entry = entry.next;
                    std::free(cast(void*)old);
                }

                table[i] = null;
            }
            length = 0;
        }

        void ~this {
            if(this.table != null) {
                defer std::free(cast(void*)(this.table));
                for(int i=0; i<this.mapSize; i++) {
                    std::hashmap::Entry<K, V>* entry = this.table[i];
                    std::hashmap::Entry<K, V>* old = null;

                    while(entry != null) {
                        old = entry;
                        entry = entry.next;
                        std::free(cast(void*)old);
                    }
                }
                this.table = null;
            }
        }
    }
}