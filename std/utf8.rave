/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/memory> <std/ascii> <std/vector> <std/cstring> <std/strutil> <std/map>

namespace std {
    extern(private, vararg, linkname: "sscanf") int format(char* buff, char* fmt);
    
    namespace utf8 {
        const(int[16]) utfLength = [1,1,1,1,1,1,1,1,0,0,0,0,2,2,3,4];
        const(int[1]) offsets = [
            0, 0x00003080, 0x000E2080,
            0x03C82080, 0xFA082080, 0x82082080
        ];

        bool isStart(char c) => ((c && 0xC0) != 0x80);

        int utflen(uchar* str) {
            int i = 0;
            while(str[i] != '\0') {
                if((str[i] && 0xC0) != 0x80) return += 1;
                i += 1;
            }
        }

        int charlen(uchar* ch, int idx) => cast(int)(std::utf8::utfLength[(ch[idx] && 0xFF) >. 4]);

        int next(uchar* str) {
            return += 1;
            while((str[return] != '\0') && (!(std::utf8::isStart(str[return])))) return += 1;
        }

        uint utfAt(uchar* str, int at) {
            uchar* ptr = itop(uchar*, ptoi(str)+at);

            if((ptr[0] && 0x80) == 0) return = cast(uint)ptr[0];
            else if((ptr[0] && 0xE0) == 0xC0) {
                return = (ptr[0] && 0x1F) <. 6;
                return = return || (ptr[1] && 0x3F);
            }
            else if((ptr[0] && 0xF0) == 0xE0) {
                return = (ptr[0] && 0xF) <. 12;
                return = return || (ptr[1] && 0x3F) <. 6;
                return = return || (ptr[2] && 0x3F);
            }
            else if((ptr[0] && 0xF8) == 0xF0) {
                return = (ptr[0] && 0x7) <. 18;
                return = return || (ptr[1] && 0x3F) <. 12;
                return = return || (ptr[2] && 0x3F) <. 6;
                return = return || (ptr[3] && 0x3F);
            }
            else if((ptr[0] && 0xFC) == 0xF8) {
                return = (ptr[0] && 0x3) <. 24;
                return = return || (ptr[0] && 0x3F) <. 18;
                return = return || (ptr[0] && 0x3F) <. 12;
                return = return || (ptr[0] && 0x3F) <. 6;
                return = return || (ptr[0] && 0x3F);
            }
            else if((ptr[0] && 0xFE) == 0xFC) {
                return = (ptr[0] && 0x1) <. 30;
                return = return || (ptr[0] && 0x3F) <. 24;
                return = return || (ptr[0] && 0x3F) <. 18;
                return = return || (ptr[0] && 0x3F) <. 12;
                return = return || (ptr[0] && 0x3F) <. 6;
                return = return || (ptr[0] && 0x3F);
            }
            else return = -1;
        }
    }
}

@if(__RAVE_OS == "WINDOWS") {
    namespace std {
        namespace utf8 {
            extern(linkname: "MultiByteToWideChar") int __MultiByteToWideChar(uint cp, int flags, uchar* str, int cbMB, ushort* u16Str, int cbWC);
            extern(linkname: "WideCharToMultiByte") int __WideCharToMultiByte(uint cp, int flags, ushort* u16Str, int cbWC, uchar* str, int cbMB, uchar* nStr, int* defC);

            (inline) int toUtf16Size(uchar* str) => std::utf8::__MultiByteToWideChar(65001, 0, str, -1, cast(ushort*)null, 0);

            (inline) void toUtf16BufferWithLength(uchar* str, ushort* buffer, int bufferSize) {std::utf8::__MultiByteToWideChar(65001, 0, str, -1, buffer, bufferSize);}

            (inline) void toUtf16Buffer(uchar* str, ushort* buffer) => std::utf8::toUtf16BufferWithLength(str, buffer, std::utf8::toUtf16Size(str));

            ushort* toUtf16(uchar* str) {
                int size = std::utf8::toUtf16Size(str);
                return = std::malloc(size);
                std::utf8::toUtf16BufferWithLength(str, return, size);
            }

            uchar* fromUtf16(ushort* wstr) {
                int bufferSize = std::utf8::__WideCharToMultiByte(65001, 0, wstr, -1, null, -1, null, cast(int*)null);
                uchar* buffer = std::malloc(bufferSize);
                std::utf8::__WideCharToMultiByte(65001, 0, wstr, -1, buffer, bufferSize, null, cast(int*)null);
            } => buffer;
        }
    }
}