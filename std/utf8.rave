/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/memory> <std/ascii> <std/vector> <std/cstring> <std/strutil> <std/map>

namespace std {
    extern(private, vararg, linkname: "sscanf") int format(char* buff, char* fmt);
    
    namespace utf8 {
        const(int[16]) utfLength = [1,1,1,1,1,1,1,1,0,0,0,0,2,2,3,4];
        const(int[1]) offsets = [
            0, 0x00003080, 0x000E2080,
            0x03C82080, 0xFA082080, 0x82082080
        ];

        bool isStart(char c) => ((c && 0xC0) != 0x80);

        int utflen(uchar* str) {
            int i = 0;
            while(str[i] != '\0') {
                if((str[i] && 0xC0) != 0x80) return += 1;
                i += 1;
            }
        }

        int charlen(uchar* ch, int idx) => cast(int)(std::utf8::utfLength[(ch[idx] && 0xFF) >. 4]);

        int next(uchar* str) {
            return += 1;
            while((str[return] != '\0') && (!(std::utf8::isStart(str[return])))) return += 1;
        }

        uint utfAt(uchar* str, int at) {
            uchar* ptr = itop(uchar*, ptoi(str)+at);

            if((ptr[0] && 0x80) == 0) return = cast(uint)ptr[0];
            else if((ptr[0] && 0xE0) == 0xC0) {
                return = (ptr[0] && 0x1F) <. 6;
                return = return || (ptr[1] && 0x3F);
            }
            else if((ptr[0] && 0xF0) == 0xE0) {
                return = (ptr[0] && 0xF) <. 12;
                return = return || (ptr[1] && 0x3F) <. 6;
                return = return || (ptr[2] && 0x3F);
            }
            else if((ptr[0] && 0xF8) == 0xF0) {
                return = (ptr[0] && 0x7) <. 18;
                return = return || (ptr[1] && 0x3F) <. 12;
                return = return || (ptr[2] && 0x3F) <. 6;
                return = return || (ptr[3] && 0x3F);
            }
            else if((ptr[0] && 0xFC) == 0xF8) {
                return = (ptr[0] && 0x3) <. 24;
                return = return || (ptr[0] && 0x3F) <. 18;
                return = return || (ptr[0] && 0x3F) <. 12;
                return = return || (ptr[0] && 0x3F) <. 6;
                return = return || (ptr[0] && 0x3F);
            }
            else if((ptr[0] && 0xFE) == 0xFC) {
                return = (ptr[0] && 0x1) <. 30;
                return = return || (ptr[0] && 0x3F) <. 24;
                return = return || (ptr[0] && 0x3F) <. 18;
                return = return || (ptr[0] && 0x3F) <. 12;
                return = return || (ptr[0] && 0x3F) <. 6;
                return = return || (ptr[0] && 0x3F);
            }
            else return = -1;
        }
    }
    
    (data: "data", length: "length") struct u8string {
        char* data;
        int length;
        int capacity;

        std::u8string this(char* a) {
            std::u8string this;
            if(a != null) {
                this.length = std::cstring::strlen(a);
                this.capacity = (this.length * 2) + 2;
                if(this.capacity == 0) this.capacity = 2;
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i < this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
                this.data[i] = '\0';
            }
            else {
                this.length = 0;
                this.capacity = 2;
                this.data = std::malloc(this.capacity);
                this.data[0] = '\0';
            }
        } => this;

        void ~this {
            if(this.data != null) {
                std::free(this.data);
                this.data = null;
                this.length = 0;
                this.capacity = 0;
            }
        }

        void setValue(char* a) {
            if(a != null) {
                this.length = std::cstring::strlen(a);
                this.capacity = (this.length * 2) + 2;
                if(this.capacity == 0) this.capacity = 2;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);

                int i = 0;
                while(i<this.length) {
                    this.data[i] = a[i];
                    i += 1;
                }
                this.data[i] = '\0';
            }
            else {
                this.length = 0;
                this.capacity = 2;
                if(this.data != null) std::free(this.data);
                this.data = std::malloc(this.capacity);
                this.data[0] = '\0';
            }
        }

        (inline) void set(int index, uchar ch) {
            @if(__RAVE_RUNTIME_CHECKS) if((index >= 0) && (index < this.length)) this.data[index] = ch;
            @else this.data[index] = ch;
        }

        (inline) char at(int index) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if((index >= 0) && (index < this.length)) return = this.data[index];
                else return = '\0';
            }
            @else return = this.data[index];
        }

        (inline) bool isDeleted => (this.data == null);

        (inline) char* c => this.data;

        char toChar => this.data[0];
        (inline) cent toCent => std::cstring::stoc(this.data, this.length);
        (inline) long toLong => std::cstring::stol(this.data, this.length);
        int toInt => cast(int)this.toLong();

        int indexOf(char c) => std::cstring::indexOf(this.data, c);

        int indexOf(char* s) {
            char* ptr = std::cstring::strstr(this.data, s);
            if(ptr != null) return = ptoi(ptr) - ptoi(this.data);
            else return = -1;
        }

        (inline) int indexOf(std::u8string s) => this.indexOf(s.data);

        void add(char c) {
            if(this.data != null) {
                this.length += 1;

                if(this.length >= this.capacity) {
                    this.data = std::realloc(this.data, this.capacity * 2);
                    this.capacity = this.capacity * 2;
                }

                this.data[this.length - 1] = c;
                this.data[this.length] = '\0';
            }
        }

        void append(std::u8string str) {
            if(this.data != null) {
                int i = 0;

                if((this.length + str.length) >= this.capacity) {
                    this.data = std::realloc(this.data, this.capacity + str.length + 2);
                    this.capacity = this.capacity + str.length + 2;
                }

                while(i < str.length) {
                    this.length += 1;
                    this.data[this.length - 1] = str.data[i];
                    i += 1;
                }

                this.data[this.length] = '\0';
            }
        }

        void appendC(char* cstr, int cstrlen) {
            if(this.data != null) {
                int len = cstrlen;
                int i = 0;

                if((this.length + len) >= this.capacity) {
                    this.data = std::realloc(this.data, this.capacity + len + 2);
                    this.capacity = this.capacity + len + 2;
                }

                while(i < len) {
                    this.length += 1;
                    this.data[this.length - 1] = cstr[i];
                    i += 1;
                }

                this.data[this.length] = '\0';
            }
        }

        (inline) void appendC(char* cstr) => this.appendC(cstr, std::cstring::strlen(cstr));

        std::u8string copy {
            std::u8string cp = std::u8string("");
            cp.append(this);
        } => cp;

        void replace(char c, char to) {
            int i = 0;
            while(i < this.length) {
                if(this.data[i] == c) this.data[i] = to;
                i += 1;
            }
        }

        void operator=(std::u8string* one, char* two) {one[0] = std::u8string(two);}

        std::u8string replace(char* from, int fromLen, char* to, int toLen) {
            return = "";

            int i = 0;
            while(i < this.length) {
                if((this.length - fromLen) <= i) {
                    for(int j=i; j<this.length; j++) return.add(this.data[j]);
                    break;
                }

                if(std::cstring::strncmp(itop(char*, ptoi(this.data) + i), from, fromLen)) {
                    return.appendC(to, toLen);
                    i += fromLen;
                    continue;
                }

                return.add(this.data[i]);
                i += 1;
            }
        }

        (inline) std::u8string replace(char* from, char* to) => this.replace(from, std::cstring::strlen(from), to, std::cstring::strlen(to));

        (inline) std::u8string replace(std::u8string from, std::u8string to) => this.replace(from.data, from.length, to.data, to.length);

        std::u8string operator+(std::u8string one, std::u8string two) {
            std::u8string third = "";
            for(int i=0; i<one.length; i+=1) third.add(one.data[i]);
            for(int i=0; i<two.length; i+=1) third.add(two.data[i]);
        } => third;

        bool operator==(std::u8string one, std::u8string two) {
            return = true;
            if(one.length != two.length) return = false;
            else {
                for(int i=0; i<one.length; i+=1) {
                    if(one.data[i] != two.data[i]) {
                        return = false;
                        break;
                    }
                }
            }
        }

        bool operator==(std::u8string one, char* two) {
            return = true;
            for(int i=0; i<one.length; i+=1) {
                if(one.data[i] != two[i]) {
                    return = false;
                    break;
                }
            }
        }

        std::u8string substring(int from, int to) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if(((from >= 0) && (from < this.length)) && ((to >= 0) && (to < this.length))) @return(null);
            }
            
            return = "";
            int i = from;

            while(i < to) {
                return.add(this.data[i]);
                i += 1;
            }
        }

        std::vector<std::u8string> split(char ch) {
            std::vector<std::u8string> parts = std::vector<std::u8string>();

            int idx = 0;
            std::u8string buffer = "";
            while(idx < this.length) {
                if(this.data[idx] != ch) {
                    buffer.add(this.data[idx]);
                    idx += 1;
                }
                else {
                    if(buffer.length > 0) parts.add(buffer.copy());
                    buffer.length = 0;
                    idx += 1;
                }
            }
            if(buffer.length > 0) parts.add(buffer.copy());
            ~buffer;
        } => parts;

        std::u8string ltrim {
            int idx = 0;
            while((idx < this.length) && (std::ascii::isSpace(this.data[idx]))) idx += 1;
        } => this.substring(idx, this.length);

        std::u8string rtrim {
            int idx = this.length - 1;
            while(std::ascii::isSpace(this.data[idx])) idx -= 1;
        } => this.substring(0, idx + 1);

        (inline) std::u8string trim {
            int idxL = 0;
            int idxR = this.length - 1;
            while((idxL < this.length) && (std::ascii::isSpace(this.data[idxL]))) idxL += 1;
            while(std::ascii::isSpace(this.data[idxR])) idxR -= 1;
        } => this.substring(idxL, idxR + 1);

        std::u8string insert(int pos, char* str) {
            std::u8string buffer = "";
            int i = 0;
            while(i < pos) {
                buffer.add(this.data[i]);
                i += 1;
            }
            buffer.appendC(str);
            while(i < this.length) {
                buffer.add(this.data[i]);
                i += 1;
            }
        } => buffer;

        int hash => std::hash::crc32(this.data, this.length);
    }

    namespace u8string {
        (inline) std::u8string fromNumber(long n) {
            char[24] tempBuffer;
            std::cstring::ltos(n, &tempBuffer);
            std::u8string sNumber = std::u8string(&tempBuffer);
        } => sNumber;
        (inline) std::u8string fromNumber(int n) => std::u8string::fromNumber(cast(long)n);
        (inline) std::u8string fromNumber(short n) => std::u8string::fromNumber(cast(long)n);
        (inline) std::u8string fromNumber(char n) => std::u8string::fromNumber(cast(long)n);
        (inline) std::u8string fromNumber(bool n) => std::u8string::fromNumber(cast(long)n);

        (inline) std::u8string fromDoubleN(double n, int precision) {
            char[24] tempBuffer;
            std::cstring::dtos(n, precision, &tempBuffer);
            std::u8string sNumber = std::u8string(&tempBuffer);
        } => sNumber;
        (inline) std::u8string fromDouble(double n) => std::u8string::fromDoubleN(n, 8);

        (inline) std::u8string fromFloatN(float n, int precision) => std::u8string::fromDoubleN(cast(double)n, precision);
        (inline) std::u8string fromFloat(float n) => std::u8string::fromFloatN(n, 7);

        (inline) std::u8string fromUNumber(char n) => std::u8string::fromUNumber(cast(short)n);
    }
}

@if(__RAVE_OS == "WINDOWS") {
    namespace std {
        namespace utf8 {
            extern(linkname: "MultiByteToWideChar") int __MultiByteToWideChar(uint cp, int flags, uchar* str, int cbMB, ushort* u16Str, int cbWC);
            extern(linkname: "WideCharToMultiByte") int __WideCharToMultiByte(uint cp, int flags, ushort* u16Str, int cbWC, uchar* str, int cbMB, uchar* nStr, int* defC);

            ushort* toUtf16(uchar* str) {
                int bufferSize = std::utf8::__MultiByteToWideChar(65001, 0, str, -1, cast(ushort*)null, 0);
                ushort* buffer = cast(ushort*)std::malloc(bufferSize);
                std::utf8::__MultiByteToWideChar(65001, 0, str, -1, buffer, bufferSize);
            } => buffer;

            uchar* fromUtf16(ushort* wstr) {
                int bufferSize = std::utf8::__WideCharToMultiByte(65001, 0, wstr, -1, null, -1, null, cast(int*)null);
                uchar* buffer = std::malloc(bufferSize);
                std::utf8::__WideCharToMultiByte(65001, 0, wstr, -1, buffer, bufferSize, null, cast(int*)null);
            } => buffer;
        }
    }
}