/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/ascii>

namespace std {
    namespace unicode {
        (inline) bool isSpace(uint c) => (c == ' ') || (c == '\r') || (c == '\t') || (c == '\n') || (c == '\v');
        (inline) bool isDigit(uint c) => (c >= '0') && (c <= '9');

        (inline) bool isLower(uint c) {
            return = false;
            if (c < 128) return = (c > 96) && (c < 123);
            else {
                if ((c > 1071) && (c < 1104)) return = true; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        }

        (inline) bool isUpper(uint c) {
            return = false;
            if (c < 128) return = (c > 64) && (c < 91);
            else {
                if ((c > 1039) && (c < 1072)) return = true; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        }

        (inline) uint toLower(uint c) {
            return = c;
            if (c < 128) return = std::ascii::toLower(c);
            else {
                if ((c > 1039) && (c < 1072)) return = c + 32; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        }

        (inline) uint toUpper(uint c) {
            return = c;
            if (c < 128) return = std::ascii::toUpper(c);
            else {
                if ((c > 1071) && (c < 1104)) return = c - 32; // Cyrillic (russian)
                // TODO: add completely support of cyrillic
            }
        }
    }
}