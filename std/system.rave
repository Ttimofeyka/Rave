/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/utf8> <std/process>

namespace std {
    extern(linkname: "system") int system(char* cmd);
}

@if((__RAVE_OS == "LINUX") || (__RAVE_OS == "FREEBSD")) {
    import <std/sysc>

    namespace std {
        namespace system {
            (inline) int reboot(int cmd) => cast(int)std::syscall(std::sysctable::Reboot, cmd);
            (inline) char* getCwd(char* buffer, int size) => std::syscall(std::sysctable::GetCwd, buffer, size);
        }
    }
}
@else @if(__RAVE_OS == "WINDOWS") {
    namespace std {
        namespace system {
            extern(linkname: "GetCurrentDirectoryW") int __getCurrentDirectory(int size, ushort* buffer);

            (inline) char* getCwd(char* cbuffer, int size) {
                int bufferSize = std::system::__getCurrentDirectory(0, cast(ushort*)null);

                ushort* buffer = cast(ushort*)std::malloc(bufferSize);
                defer std::free(cast(void*)buffer);

                std::system::__getCurrentDirectory(bufferSize, buffer);
                if(cbuffer == null) return = std::utf8::fromUtf16(buffer);
                else {
                    // For compability with libc
                    char* u8Buffer = std::utf8::fromUtf16(buffer);
                    for(int i=0; i<size; i++) cbuffer[i] = u8Buffer[i];
                    return = cbuffer;
                    std::free(u8Buffer);
                }
            }
        }
    }
}
@else {
    namespace std {
        namespace system {
            extern(linkname: "reboot") int reboot(int cmd);
            extern(linkname: "getcwd") char* getCwd(char* buffer, int size);
        }
    }
}
