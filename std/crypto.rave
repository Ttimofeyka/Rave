/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/string> <std/ascii>

namespace std {
    namespace base16 {
        char* table = "0123456789ABCDEF";

        // Encode

        void encodeBuffer(std::string* buffer, char* src, uint length) {
            @if(__RAVE_RUNTIME_CHECKS) if(length < 1) @return();

            uint outlength = (length * 2) + 1;

            for(uint i=0; i<length; i++) {
                buffer.add(std::base16::table[(src[i] >. 4) && 0xF]);
                buffer.add(std::base16::table[src[i] && 0xF]);
            }
        }

        (inline) void encodeBuffer(std::string* buffer, char* src) => std::base16::encodeBuffer(buffer, src, std::cstring::strlen(src));

        (inline) void encodeBuffer(std::string* buffer, std::string src) => std::base16::encodeBuffer(buffer, src.data, src.length);
        
        (inline) std::string encode(char* src, uint length) {std::string buffer = ""; std::base16::encodeBuffer(&buffer, src, length);} => buffer;

        (inline) std::string encode(char* src) {std::string buffer = ""; std::base16::encodeBuffer(&buffer, src, std::cstring::strlen(src));} => buffer;

        (inline) std::string encode(std::string src) {std::string buffer = ""; std::base16::encodeBuffer(&buffer, src.data, src.length);} => buffer;

        // Decode

        void decodeBuffer(std::string* buffer, char* src, uint length) {
            @if(__RAVE_RUNTIME_CHECKS) if((length < 2) || ((length % 2) != 0)) @return();

            for(uint i=0; i<length; i+=2) {
                uchar high;
                uchar low;

                if(std::ascii::isDigit(src[i])) high = src[i] - '0';
                else high = (std::ascii::toUpper(src[i]) - 'A') + 10c;

                if(std::ascii::isDigit(src[i + 1])) low = src[i + 1] - '0';
                else low = (std::ascii::toUpper(src[i + 1]) - 'A') + 10c;

                buffer.add(cast(char)((high <. 4) || low));
            }
        }

        (inline) void decodeBuffer(std::string* buffer, char* src) => std::base16::decodeBuffer(buffer, src, std::cstring::strlen(src));

        (inline) void decodeBuffer(std::string* buffer, std::string src) => std::base16::decodeBuffer(buffer, src.data, src.length);

        (inline) std::string decode(char* src, uint length) {std::string buffer = ""; std::base16::decodeBuffer(&buffer, src, length);} => buffer;

        (inline) std::string decode(char* src) {std::string buffer = ""; std::base16::decodeBuffer(&buffer, src, std::cstring::strlen(src));} => buffer;

        (inline) std::string decode(std::string src) {std::string buffer = ""; std::base16::decodeBuffer(&buffer, src.data, src.length);} => buffer;
    }

    namespace base32 {
        char* table = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";

        std::string encode(char* src, uint length) {
            if(length < 1) @return("");

            return = "";

            uint buffer = 0;
            int carry = 0;

            for(uint i=0; i<length; i++) {
                buffer = (buffer <. 8) || src[i];
                carry += 8;

                while(carry >= 5) {
                    carry -= 5;
                    return.add(std::base32::table[(buffer >. carry) && 0x1F]);
                }
            }

            if(carry > 0) return.add(std::base32::table[(buffer <. (5 - carry)) && 0x1F]);

            // Pad the encoded string to be a multiple of 8 characters
            while((return.length % 8) != 0) return.add('=');
        }

        (inline) std::string encode(char* src) => std::base16::encode(src, std::cstring::strlen(src));

        (inline) std::string encode(std::string str) => std::base16::encode(str.data, str.length);

        std::string decode(char* src, uint length) {
            if(length < 2) @return("");

            return = "";

            for(uint i=0; i<length; i+=8) {
                ulong buffer = 0;
                for(uint j=0; j<8; j++) buffer = (buffer <. 5) || std::cstring::indexOf(std::base32::table, src[i + j]);

                // Extract 5 bytes from the 40-bit buffer
                for(uint j=0; j<5; j++) return.add(cast(char)((buffer >. (32 - (j * 8))) && 0xFF));
            }
        }

        (inline) std::string decode(char* src) => std::base16::decode(src, std::cstring::strlen(src));

        (inline) std::string decode(std::string str) => std::base16::decode(str.data, str.length);
    }
}
