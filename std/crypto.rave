/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/cstring> <std/string> <std/ascii>

namespace std {
    namespace base16 {
        const(char*) table = "0123456789ABCDEF";

        // Encode

        void encode(std::string* buffer, std::cstring str) {
            @if(__RAVE_RUNTIME_CHECKS) if(str.length < 1) @return();

            usize outlength = (str.length * 2) + 1;

            for(usize i=0; i<str.length; i++) {
                buffer.add(std::base16::table[(str.data[i] >. 4) & 0xF]);
                buffer.add(std::base16::table[str.data[i] & 0xF]);
            }
        }

        (inline, explicit) void encode(std::string* buffer, std::string str) => std::base16::encode(buffer, std::cstring(str.data, str.length));

        // Decode

        void decode(std::string* buffer, std::cstring str) {
            @if(__RAVE_RUNTIME_CHECKS) if((str.length & 1) != 0) @return();

            for(usize i=0; i<str.length; i+=2) {
                uchar high;
                uchar low;

                if(std::ascii::isDigit(str.data[i])) high = str.data[i] - '0';
                else high = (std::ascii::toUpper(str.data[i]) - 'A') + 10c;

                if(std::ascii::isDigit(str.data[i + 1])) low = str.data[i + 1] - '0';
                else low = (std::ascii::toUpper(str.data[i + 1]) - 'A') + 10c;

                buffer.add(cast(char)((high <. 4) | low));
            }
        }

        (inline, explicit) void decode(std::string* buffer, std::string str) => std::base16::decode(buffer, std::cstring(str.data, str.length));
    }

    namespace base32 {
        const(char*) table = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";

        // Encode

        void encode(std::string* buffer, std::cstring str) {
            @if(__RAVE_RUNTIME_CHECKS) if(str.length == 0) @return();

            usize buf = 0;
            usize added = 0;
            int carry = 0;

            for(usize i=0; i<str.length; i++) {
                buf = (buf <. 8) | str.data[i];
                carry += 8;

                while(carry >= 5) {
                    carry -= 5;
                    buffer.add(std::base32::table[(buf >. carry) & 0x1F]);
                    added += 1;
                }
            }

            if(carry > 0) {buffer.add(std::base32::table[(buf <. (5 - carry)) & 0x1F]); added += 1;}

            // Pad the encoded string to be a multiple of 8 characters
            while((added & 7) != 0) {buffer.add('='); added += 1;}
        }

        (inline, explicit) void encode(std::string* buffer, std::string str) => std::base32::encode(buffer, std::cstring(str.data, str.length));

        // Decode

        void decode(std::string* buffer, std::cstring str) {
            @if(__RAVE_RUNTIME_CHECKS) if(str.length < 2) @return();

            for(usize i=0; i<str.length; i+=8) {
                ulong buf = 0;
                for(usize j=0; j<8; j++) buf = (buf <. 5) | std::cstring::indexOf(std::base32::table, str.data[i + j]);

                // Extract 5 bytes from the 40-bit buf
                for(usize j=0; j<5; j++) buffer.add(cast(char)((buf >. (32 - (j * 8))) & 0xFF));
            }
        }

        (inline, explicit) void decode(std::string* buffer, std::string str) => std::base32::decode(buffer, std::cstring(str.data, str.length));
    }

    namespace base64 {
        const(char*) table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

        // Encode

        void encode(std::string* buffer, std::cstring str) {
            @if(__RAVE_RUNTIME_CHECKS) if(str.length == 0) @return();

            usize remaining = str.length;
            usize index = 0;

            char[128] buf;
            usize bufIndex = 0;

            while(remaining >= 3) {
                uint triple = (str.data[index] <. 16) | (str.data[index + 1] <. 8) | str.data[index + 2];

                if(bufIndex >= 128) {
                    buffer.appendC(&buf, 128);
                    bufIndex = 0;
                }

                buf[bufIndex] = std::base64::table[(triple >. 18) & 0x3F];
                buf[bufIndex + 1] = std::base64::table[(triple >. 12) & 0x3F];
                buf[bufIndex + 2] = std::base64::table[(triple >. 6) & 0x3F];
                buf[bufIndex + 3] = std::base64::table[triple & 0x3F];

                bufIndex += 4;

                index += 3;
                remaining -= 3;
            }

            if(bufIndex > 0) buffer.appendC(&buf, bufIndex);

            if(remaining == 1) {
                uint triple = (str.data[index] <. 16);

                buffer.appendC(&[std::base64::table[(triple >. 18) & 0x3F], std::base64::table[(triple >. 12) & 0x3F], '=', '='], 4);
            }
            else if(remaining == 2) {
                uint triple = (str.data[index] <. 16) | (str.data[index + 1] <. 8);

                buffer.appendC(&[std::base64::table[(triple >. 18) & 0x3F], std::base64::table[(triple >. 12) & 0x3F], std::base64::table[(triple >. 6) & 0x3F], '='], 4);
            }
        }

        (inline, explicit) void encode(std::string* buffer, std::string str) => std::base64::encode(buffer, std::cstring(str.data, str.length));

        // Decode

        void decode(std::string* buffer, std::cstring str) {
            @if(__RAVE_RUNTIME_CHECKS) if(str.length == 0) @return();

            char counts = 0;
            char[4] buf;

            for(usize i = 0; i<str.length; i++) {
                char k;
                for(k=0; (k < 64) && (std::base64::table[k] != str.data[i]); k++) {}
                buf[counts] = k;
                counts += 1;

                if(counts == 4) {
                    buffer.add((buf[0] <. 2) + (buf[1] >. 4));
                    if(buf[2] != 64) buffer.add((buf[1] <. 4) + (buf[2] >. 2));
                    if(buf[3] != 64) buffer.add((buf[2] <. 6) + buf[3]);
                    counts = 0;
                }
            }
        }

        (inline, explicit) void decode(std::string* buffer, std::string str) => std::base64::decode(buffer, std::cstring(str.data, str.length));
    }
}
