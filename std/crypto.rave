/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/string> <std/ascii>

namespace std {
    namespace base16 {
        const(char*) table = "0123456789ABCDEF";

        // Encode

        void encodeBuffer(std::string* buffer, char* src, usize length) {
            @if(__RAVE_RUNTIME_CHECKS) if(length < 1) @return();

            usize outlength = (length * 2) + 1;

            for(usize i=0; i<length; i++) {
                buffer.add(std::base16::table[(src[i] >. 4) & 0xF]);
                buffer.add(std::base16::table[src[i] & 0xF]);
            }
        }

        (inline) void encodeBuffer(std::string* buffer, char* src) => std::base16::encodeBuffer(buffer, src, std::cstring::strlen(src));

        (inline) void encodeBuffer(std::string* buffer, std::string src) => std::base16::encodeBuffer(buffer, src.data, src.length);
        
        (inline) std::string encode(std::cstring src) {return = ""; std::base16::encodeBuffer(&return, src.data, src.length);}

        (inline, explicit) std::string encode(std::string src) {return = ""; std::base16::encodeBuffer(&return, src.data, src.length);}

        // Decode

        void decodeBuffer(std::string* buffer, char* src, usize length) {
            @if(__RAVE_RUNTIME_CHECKS) if((length < 2) || ((length & 1) != 0)) @return();

            for(usize i=0; i<length; i+=2) {
                uchar high;
                uchar low;

                if(std::ascii::isDigit(src[i])) high = src[i] - '0';
                else high = (std::ascii::toUpper(src[i]) - 'A') + 10c;

                if(std::ascii::isDigit(src[i + 1])) low = src[i + 1] - '0';
                else low = (std::ascii::toUpper(src[i + 1]) - 'A') + 10c;

                buffer.add(cast(char)((high <. 4) | low));
            }
        }

        (inline) void decodeBuffer(std::string* buffer, char* src) => std::base16::decodeBuffer(buffer, src, std::cstring::strlen(src));

        (inline) void decodeBuffer(std::string* buffer, std::string src) => std::base16::decodeBuffer(buffer, src.data, src.length);

        (inline) std::string decode(std::cstring src) {return = ""; std::base16::decodeBuffer(&return, src.data, src.length);}

        (inline, explicit) std::string decode(std::string src) {return = ""; std::base16::decodeBuffer(&return, src.data, src.length);}
    }

    namespace base32 {
        const(char*) table = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";

        // Encode

        void encodeBuffer(std::string* buffer, char* src, usize length) {
            @if(__RAVE_RUNTIME_CHECKS) if(length == 0) @return();

            usize buf = 0;
            int carry = 0;

            for(usize i=0; i<length; i++) {
                buf = (buf <. 8) | src[i];
                carry += 8;

                while(carry >= 5) {
                    carry -= 5;
                    buffer.add(std::base32::table[(buf >. carry) & 0x1F]);
                }
            }

            if(carry > 0) buffer.add(std::base32::table[(buf <. (5 - carry)) & 0x1F]);

            // Pad the encoded string to be a multiple of 8 characters
            while((buffer.length & 7) != 0) buffer.add('=');
        }

        (inline) std::string encode(std::cstring src) {return = ""; std::base32::encodeBuffer(&return, src.data, src.length);}

        (inline, explicit) std::string encode(std::string src) {return = ""; std::base32::encodeBuffer(&return, src.data, src.length);}

        // Decode

        void decodeBuffer(std::string* buffer, char* src, usize length) {
            @if(__RAVE_RUNTIME_CHECKS) if(length < 2) @return();

            for(usize i=0; i<length; i+=8) {
                ulong buf = 0;
                for(usize j=0; j<8; j++) buf = (buf <. 5) | std::cstring::indexOf(std::base32::table, src[i + j]);

                // Extract 5 bytes from the 40-bit buf
                for(usize j=0; j<5; j++) buffer.add(cast(char)((buf >. (32 - (j * 8))) & 0xFF));
            }
        }

        (inline) std::string decode(std::cstring src) {return = ""; std::base32::decodeBuffer(&return, src.data, src.length);}

        (inline, explicit) std::string decode(std::string src) {return = ""; std::base32::decodeBuffer(&return, src.data, src.length);}
    }

    namespace base64 {
        const(char*) table = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

        // Encode

        void encodeBuffer(std::string* buffer, char* src, usize length) {
            @if(__RAVE_RUNTIME_CHECKS) if(length == 0) @return();
        
            usize remaining = length;
            usize index = 0;
        
            while(remaining >= 3) {
                uint triple = (src[index] <. 16) | (src[index + 1] <. 8) | src[index + 2];
                buffer.add(std::base64::table[(triple >. 18) & 0x3F]);
                buffer.add(std::base64::table[(triple >. 12) & 0x3F]);
                buffer.add(std::base64::table[(triple >. 6) & 0x3F]);
                buffer.add(std::base64::table[triple & 0x3F]);

                index += 3;
                remaining -= 3;
            }
        
            if(remaining == 1) {
                uint triple = (src[index] <. 16);
                buffer.add(std::base64::table[(triple >. 18) & 0x3F]);
                buffer.add(std::base64::table[(triple >. 12) & 0x3F]);
                buffer.appendC("==");
            }
            else if(remaining == 2) {
                uint triple = (src[index] <. 16) | (src[index + 1] <. 8);
                buffer.add(std::base64::table[(triple >. 18) & 0x3F]);
                buffer.add(std::base64::table[(triple >. 12) & 0x3F]);
                buffer.add(std::base64::table[(triple >. 6) & 0x3F]);
                buffer.add('=');
            }
        }

        (inline) std::string encode(std::cstring src) {return = ""; std::base64::encodeBuffer(&return, src.data, src.length);}

        (inline, explicit) std::string encode(std::string src) {return = ""; std::base64::encodeBuffer(&return, src.data, src.length);}

        // Decode

        void decodeBuffer(std::string* buffer, char* src, usize length) {
            @if(__RAVE_RUNTIME_CHECKS) if(length == 0) @return();

            char counts = 0;
            char[4] buf;

            for(usize i = 0; i<length; i++) {
                char k;
                for(k=0; (k < 64) && (std::base64::table[k] != src[i]); k++) {}
                buf[counts] = k;
                counts += 1;

                if(counts == 4) {
                    buffer.add((buf[0] <. 2) + (buf[1] >. 4));
                    if(buf[2] != 64) buffer.add((buf[1] <. 4) + (buf[2] >. 2));
                    if(buf[3] != 64) buffer.add((buf[2] <. 6) + buf[3]);
                    counts = 0;
                }
            }
        }

        (inline) std::string decode(std::cstring src) {return = ""; std::base64::decodeBuffer(&return, src.data, src.length);}

        (inline, explicit) std::string decode(std::string src) {return = ""; std::base64::decodeBuffer(&return, src.data, src.length);}
    }
}
