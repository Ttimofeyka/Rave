/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

namespace std {
    extern(linkname: "aligned_alloc") void* amalloc(usize alignment, usize size);
    extern(linkname: "malloc") void* malloc(usize size);
    extern(linkname: "free") void free(void* ptr);
    extern(linkname: "realloc") void* realloc(void* ptr, usize newsize);

    (inline) void* calloc(usize num, usize size) => std::malloc(num * size);
}

namespace std {
    (nochecks) void* memcpy(void* dest, void* src, usize n) {
        for(usize i=0; i<n; i+=1) dest[i] = src[i];
    } => dest;

    (nochecks) void* memmove(void* dest, void* src, usize n) {
        void* temp = std::malloc(n);
        for(usize i=0; i<n; i++) temp[i] = src[i];
        for(usize i=0; i<n; i++) dest[i] = temp[i];
        std::free(temp);
    } => dest;

    (nochecks) void swap(void* one, void* two, usize size) {
        for(usize i=0; i<size; i++) {
            char old = one[i];
            one[i] = two[i];
            two[i] = old;
        }
    }

    (nochecks) void memset(void* dest, char c, usize n) {
        usize idx = 0;

        @if(__RAVE_AVX2) {
            int8 value = @vFrom(int8, cast(int)c);
            
            auto align = ptoi(dest) & 15;
            while((align > 0) && (idx < n)) {
                dest[idx] = c;
                align -= 1;
                idx += 1;
            }

            for(; (idx + 31) < n; idx+=32) @vStore(value, &dest[idx]);
        }
        @else @if(__RAVE_SSE2) {
            int4 value = @vFrom(int4, cast(int)c);

            auto align = ptoi(dest) & 15;
            while((align > 0) && (idx < n)) {
                dest[idx] = c;
                align -= 1;
                idx += 1;
            }

            for(; (idx + 15) < n; idx+=16) @vStore(value, &dest[idx]);
        }

        for(; idx<n; idx++) dest[idx] = c;
    }

    // TODO: Remake for libc compability
    (nochecks) bool memcmp(void* one, void* two, usize n) {
        return = true;

        usize i = 0;

        @if(__RAVE_SSE2) {
            int4 left, right;

            for(; (i + 15) < n; i+=16) {
                left = @vLoad(int4, &one[i], false);
                right = @vLoad(int4, &two[i], false);

                bool[4] result = left != right;
                if(result[0] || result[1] || result[2] || result[3]) @return(false);

                i += 16;
            }
        }

        for(; i<n; i+=1) {
            if(one[i] != two[i]) @return(false);
        }
    }

    (inline) NEW_T* new<NEW_T>(usize n) => cast(NEW_T*)std::malloc(n * sizeof(NEW_T));
    (inline) NEW_T* new<NEW_T>() => cast(NEW_T*)std::malloc(sizeof(NEW_T));

    (inline) ANEW_T* anew<ANEW_T>(usize alignment, usize n) => cast(ANEW_T*)std::amalloc(alignment, n * sizeof(ANEW_T));
    (inline) ANEW_T* anew<ANEW_T>(usize alignment) => cast(ANEW_T*)std::amalloc(alignment, sizeof(ANEW_T));

    struct pair<P1, P2> {
        P1 first;
        P2 second;

        std::pair<P1, P2> this(P1 first, P2 second) {
            std::pair<P1, P2> this;
            this.first = first;
            this.second = second;
        } => this;

        uint hash {
            return = 2;

            char* pFirst = cast(char*)(this.&first);
            char* pSecond = cast(char*)(this.&second);
            
            for(usize i=0; i<sizeof(P1); i++) return = return * pFirst[i] + 7588 + (return <. 6) + (return >. 2);
            for(usize i=0; i<sizeof(P2); i++) return = return * pSecond[i] + 7588 + (return <. 6) + (return >. 2);
        }
    }
}
