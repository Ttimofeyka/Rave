/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

namespace std {
    namespace math {
        /* BEGIN altered code from https://netlib.org/fdlibm */

        /* @(#)e_exp.c 1.6 04/04/22 */
        /*
        * ====================================================
        * Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
        *
        * Permission to use, copy, modify, and distribute this
        * software is freely granted, provided that this notice
        * is preserved.
        * ====================================================
        */

        namespace exp {
            alias one = 1.0d;
            const(double[2]) halF = [0.5d, -0.5d];
            alias huge = 1.0e+300d;

            alias twom1000 = 9.33263618503218878990e-302d; /* 2**-1000=0x01700000,0*/
            alias o_threshold =  7.09782712893383973096e+02d;  /* 0x40862E42, 0xFEFA39EF */
            alias u_threshold = -7.45133219101941108420e+02d;  /* 0xc0874910, 0xD52D3051 */

            const(double[2]) ln2HI = [
                6.93147180369123816490e-01d,  /* 0x3fe62e42, 0xfee00000 */
                -6.93147180369123816490e-01d  /* 0xbfe62e42, 0xfee00000 */
            ];

            const(double[2]) ln2LO = [
                1.90821492927058770002e-10d,  /* 0x3dea39ef, 0x35793c76 */
                -1.90821492927058770002e-10d  /* 0xbdea39ef, 0x35793c76 */
            ];

            alias invln2 =  1.44269504088896338700d; /* 0x3ff71547, 0x652b82fe */
            alias P1 =  1.66666666666666019037e-01d; /* 0x3FC55555, 0x5555553E */
            alias P2 = -2.77777777770155933842e-03d; /* 0xBF66C16C, 0x16BEBD93 */
            alias P3 =  6.61375632143793436117e-05d; /* 0x3F11566A, 0xAF25DE2C */
            alias P4 = -1.65339022054652515390e-06d; /* 0xBEBBBD41, 0xC5D26BF1 */
            alias P5 =  4.13813679705723846039e-08d; /* 0x3E663769, 0x72BEA4D0 */
        }

        double exp(double x) {
            double y, hi, lo, c, t;
            int k, xsb;
            uint hx;

            const(uint) LE = cast(uint)__RAVE_LITTLE_ENDIAN;
            const(uint) BE = cast(uint)__RAVE_BIG_ENDIAN;

            uint* xp = cast(uint*)&x;
            hx  = xp[LE]; // high word of x
            xsb = (hx >. 31) & 1; // sign bit of x
            hx = hx & 0x7fffffff; // high word of |x|

            // filter out non-finite argument
            if (hx >= 0x40862E42) { // if |x|>=709.78...
                if (hx >= 0x7ff00000) {
                    if (0 != (
                        (hx & 0xfffff) | xp[BE]
                    )) return = x + x; // NaN

                    if (xsb == 0) return = x;
                    else return = 0.0d; // exp(+-inf)={inf,0}

                    @return();
                }
                if (x > std::math::exp::o_threshold)
                    @return(std::math::exp::huge * std::math::exp::huge); // overflow
                if (x < std::math::exp::u_threshold)
                    @return(std::math::exp::twom1000 * std::math::exp::twom1000); // underflow
            }

            /* argument reduction */
            if (hx > 0x3fd62e42) { // if  |x| > 0.5 ln2
                if (hx < 0x3FF0A2B2) { // and |x| < 1.5 ln2
                    hi = x - std::math::exp::ln2HI[xsb];
                    lo = std::math::exp::ln2LO[xsb];
                    k = 1 - xsb - xsb;
                }
                else {
                    k  = cast(int)(std::math::exp::invln2 * x + std::math::exp::halF[xsb]);
                    t  = k;
                    hi = x - t * std::math::exp::ln2HI[0]; // t*ln2HI is exact here
                    lo = t * std::math::exp::ln2LO[0];
                }
                x = hi - lo;
            }
            else if (hx < 0x3e300000) {    // when |x|<2**-28
                if (std::math::exp::huge + x > std::math::exp::one)
                    @return(std::math::exp::one + x); // trigger inexact
            }
            else k = 0;

            /* x is now in primary range */
            t = x * x;
            c = x - t * (
                std::math::exp::P1 + t * (
                    std::math::exp::P2 + t * (
                        std::math::exp::P3 + t * (
                            std::math::exp::P4 + t * std::math::exp::P5
                        )
                    )
                )
            );

            if (k == 0) @return(std::math::exp::one - ((x * c) / (c - 2d) - x));
            y = std::math::exp::one - ((lo - (x * c) / (2d - c)) - hi);

            uint* yp = cast(uint*)&y;
            if (k >= -1021) {
                yp[LE] += (k <. 20); // add k to y's exponent
                return = y;
            }
            else {
                yp[LE] += ((k + 1000) <. 20); // add k to y's exponent
                return = y * std::math::exp::twom1000;
            }
        }

        /* END code from fdlibm */

        float exp(float arg) {
            return = std::math::exp(cast(double)arg);
        }

        alias PI = 3.14159265358979323846d;
        alias PI_f = 3.141592653589793f;
        alias PI_hf = 3.140625h;
        alias NAN = bitcast(double)0x7FF8000000000000;
        alias NAN_f = bitcast(float)0x7FC00000;
        alias NAN_hf = bitcast(half)0x7FFF;

        (inline) double degToRad(double d) => (d * std::math::PI / 180d);
        (inline) float degToRad(float d) => (d * std::math::PI_f / 180f);
        (inline) half degToRad(half hf) => (hf * std::math::PI_hf / 180h);

        (inline) double radToDeg(double r) => (r * 180d / std::math::PI);
        (inline) float radToDeg(float r) => (r * 180f / std::math::PI_f);
        (inline) half radToDeg(half r) => (r * 180h / std::math::PI_hf);

        (inline) bool isNAN(double d) {
            // Interpret the double as an unsigned 64-bit integer
            ulong bits = (cast(ulong*)&d)[0];
        
            // Extract the exponent and fraction parts
            ulong exponent = (bits >. 52) & 0x7FF;
            ulong fraction = bits & 0xFFFFFFFFFFFFF;
        } => (exponent == 0x7FF) && (fraction != 0);

        (inline) bool isNAN(float f) {
            // Interpret the float as an unsigned 32-bit integer
            uint bits = (cast(uint*)&f)[0];

            // Extract the exponent and fraction parts
            uint exponent = (bits >. 23) & 0xFF;
            uint fraction = bits & 0x7FFFFF;
        } => (exponent == 0xFF) && (fraction != 0);

        (inline) bool isNAN(half hf) {
            // Interpret the half as an unsigned 16-bit integer
            ushort bits = (cast(ushort*)&hf)[0];

            // Extract the exponent and fraction parts
            ushort exponent = (bits >. 10) & 0x1F;
            ushort fraction = bits & 0x3FF;
        } => (exponent == 0x1F) && (fraction != 0);

        long factorial(int n) {
            return = 1;
            int i = 1;
            while (i <= n) {
                return = return * i;
                i += 1;
            }
        }

        ABS_T abs<ABS_T>(ABS_T value) {
            return = value;
            if (value < cast(ABS_T)null) return = -return;
        }

        char getSign<GETSIGN_T>(GETSIGN_T value) {
            return = 1;
            if (value < cast(GETSIGN_T)null) return = -1;
        }

        // TODO: specialize for floats and avoid extra multiplying
        COPYSIGN_T copySign<COPYSIGN_T>(COPYSIGN_T v1, COPYSIGN_T v2) => std::math::abs(v1) * std::math::getSign(v2);

        double floor(double f) {
            return = (cast(double)(cast(long)f));
            if ((return < 0) && (return != f)) return = return - 1d;
        }

        float floor(float f) {
            return = (cast(float)(cast(long)f));
            if ((return < 0) && (return != f)) return = return - 1f;
        }

        half floor(half f) {
            return = (cast(half)(cast(int)f));
            if ((return < 0) && (return != f)) return = return - 1h;
        }

        double ceil(double d) => -(std::math::floor(-d));
        float ceil(float f) => -(std::math::floor(-f));
        half ceil(half h) => -(std::math::floor(-h));

        double loge(double x) {
            if (x <= 0) return = 0d;
            else {
                int powAdj = 0;
                while (x > 1.0) {
                    x = x / 2.718281828459045235;
                    powAdj += 1;
                }
                while (x < 0.25) {
                    x = x * 2.718281828459045235;
                    powAdj -= 1;
                }

                x -= 1.0;
                double t = 0.0;
                double s = 1.0;
                double z = x;
                for(int k=1; k<=50; k+=1) {
                    t = t + (z * s) / k;
                    z = z * x;
                    s = -s;
                }

                return = t + powAdj;
            }
        }

        float loge(float x) {
            if (x <= 0) return = 0f;
            else {
                int powAdj = 0;
                while (x > 1.0) {
                    x = x / 2.718281828459045235;
                    powAdj += 1;
                }
                while (x < 0.25) {
                    x = x * 2.718281828459045235;
                    powAdj -= 1;
                }

                x -= 1.0;
                float t = 0.0;
                float s = 1.0;
                float z = x;
                for(int k=1; k<=50; k+=1) {
                    t = t + (z * s) / k;
                    z = z * x;
                    s = -s;
                }

                return = t + powAdj;
            }
        }

        (inline) double log(double x) => std::math::loge(x) / std::math::loge(10.0);
        (inline) float log(float x) => std::math::loge(x) / std::math::loge(10.0);

        double sqrt(double d) {
            return = 1.0;
            for(int i=0; i<=10; i+=1) return = return - (((return * return) - d) / (2d * return));
        }

        float sqrt(float f) => cast(float)std::math::sqrt(cast(double)f);
        half sqrt(half hf) => cast(half)std::math::sqrt(cast(double)hf);

        double acos(double d) {
            double negate = cast(double)(d < 0.0);
            d = std::math::abs(d);
            double result = -0.0187293;
            result = result * d;
            result = result + 0.0742610;
            result = result * d;
            result = result - 0.2121144;
            result = result * d;
            result = result + 1.5707288;
            result = result * std::math::sqrt(1.0 - d);
            result = result - 2 * negate * result;
        } => ((negate * std::math::PI) + result);

        float acos(float f) {
            float negate = cast(float)(f < 0.0);
            f = std::math::abs(f);
            float result = -0.0187293;
            result = result * f;
            result = result + 0.0742610;
            result = result * f;
            result = result - 0.2121144;
            result = result * f;
            result = result + 1.5707288;
            result = result * std::math::sqrt(1.0 - f);
            result = result - 2 * negate * result;
        } => ((negate * std::math::PI) + result);

        double asin(double x) => (std::math::PI / 2.0) - std::math::sqrt(1.0 - x) * (1.5707288 + (-0.2121144) * x + 0.0742610 * (x * x) + -0.0187293 * (x * x * x));
        float asin(float x) => (std::math::PI_f / 2.0f) - std::math::sqrt(1.0f - x) * (1.5707288f + (-0.2121144f) * x + 0.0742610f * (x * x) + (-0.0187293f) * (x * x * x));

        double coshn(double d, int n) {
            double c = 1.0d;
            double f = 1.0d;
            double xp = 1.0d;
            for(int i=1; i<n; i+=1) {
                f = f * ((2 * i - 1) * (2 * i));
                xp = xp * (d * d);
                c += xp / f;
            }
        } => c;

        float coshn(float d, int n) {
            float c = 1.0f;
            float f = 1.0f;
            float xp = 1.0f;
            for(int i=1; i<n; i+=1) {
                f = f * ((2 * i - 1) * (2 * i));
                xp = xp * (d * d);
                c += xp / f;
            }
        } => c;

        double cosh(double x) => 0.5 * (std::math::exp(x) + std::math::exp(-x));
        float cosh(float x) => 0.5f * (std::math::exp(x) + std::math::exp(-x));

        double sinh(double x) => 0.5 * (std::math::exp(x) - std::math::exp(-x));
        float sinh(float x) => 0.5f * (std::math::exp(x) - std::math::exp(-x));

        double tanh(double x) => (std::math::exp(2.0 * x) - 1d) / (std::math::exp(2.0 * x) + 1.0);
        float tanh(float x) => (std::math::exp(2.0 * x) - 1f) / (std::math::exp(2.0 * x) + 1.0);

        double dtanh(double x) => 1d - (x * x);
        float dtanh(float x) => 1f - (x * x);

        double acosh(double x) => std::math::log(x + std::math::sqrt((x + 1.0) * (x - 1.0)));
        float acosh(float x) => std::math::log(x + std::math::sqrt((x + 1.0) * (x - 1.0)));

        double asinh(double x) => std::math::log(x + std::math::sqrt(x * x + 1.0));
        float asinh(float x) => std::math::log(x + std::math::sqrt(x * x + 1.0));

        double atanh(double x) => 0.5 * (std::math::log(1.0 + x) - std::math::log(1.0 - x));
        float atanh(float x) => 0.5f * (std::math::log(1.0 + x) - std::math::log(1.0 - x));

        double erf(double x) {
            x = std::math::abs(x);
            double t = 1.0 / (1.0 + (0.3275911 * x));
            double y = 1.0 - (((((1.061405429 * t + (-1.453152027)) * t) + 1.421413741) * t + (-0.284496736)) * t + 0.254829592) * t * std::math::exp(-x * x);
        } => std::math::getSign(x) * y;

        float erf(float x) {
            x = std::math::abs(x);
            float t = 1.0 / (1.0 + (0.3275911 * x));
            float y = 1.0 - (((((1.061405429 * t + (-1.453152027)) * t) + 1.421413741) * t + (-0.284496736)) * t + 0.254829592) * t * std::math::exp(-x * x);
        } => std::math::getSign(x) * y;

        double pow(double f, double f2) {
            if (f2 < 0) return = 1 / std::math::pow(f, -f2);
            else if ((f2 > 0.0) && (f2 < 1.0)) return = std::math::exp(f2 * std::math::loge(f));
            else {
                if (std::math::floor(f2) != f2) {
                    if (f < 0d) return = 0d;
                    else return = std::math::exp(f2 * std::math::loge(f));
                }
                else {
                    double r = 1.0;
                    while (f2 > 0) {
                        r = r * f;
                        f2 = f2 - 1;
                    }
                    if (f2 > 0) r = r * f * f2;
                    return = r;
                }
            }

            if ((f < 0d) && (return > 0d)) return = -return;
        }

        float pow(float f, float f2) {
            if (f2 < 0) return = 1 / std::math::pow(f, -f2);
            else if ((f2 > 0.0) && (f2 < 1.0)) return = std::math::exp(f2 * std::math::loge(f));
            else {
                if (std::math::floor(f2) != f2) {
                    if (f < 0f) return = 0f;
                    else return = std::math::exp(f2 * std::math::loge(f));
                }
                else {
                    float r = 1.0;
                    while (f2 > 0) {
                        r = r * f;
                        f2 = f2 - 1;
                    }
                    if (f2 > 0) r = r * f * f2;
                    return = r;
                }
            }

            if ((f < 0f) && (return > 0f)) return = -return;
        }

        double cbrt(double d) {
            if (d < 0.0d) return = (-1.0d * std::math::pow(-1.0d * d, 1.0d / 3.0d));
            else return = std::math::pow(d, 1.0d / 3.0d);
        }

        float cbrt(float f) {
            if (f < 0.0f) return = (-1.0f * std::math::pow(-1.0f * f, 1.0f / 3.0f));
            else return = std::math::pow(f, 1.0f / 3.0f);
        }
        
        double cos(double d) {
            while (d < 0.0) d = d + (2.0 * std::math::PI);
            while (d > (2.0 * std::math::PI)) d = d - (2.0 * std::math::PI);

            double t = 1.0;
            return = t;

            for(int i=1; i<40; i+=1) {
                double mult = (-d) * (d / ((2*i)*(2*i-1)));
                t = t * mult;
                return += t;
            }
        }

        float cos(float f) {
            while (f < 0.0) f = f + (2.0 * std::math::PI);
            while (f > (2.0 * std::math::PI)) f = f - (2.0 * std::math::PI);

            float t = 1.0;
            return = t;

            for(int i=1; i<40; i+=1) {
                float mult = (-f) * (f / ((2*i)*(2*i-1)));
                t = t * mult;
                return += t;
            }
        }

        (conditions: [SIGN_T != void]) char sign<SIGN_T>(SIGN_T x) {
            if (x < cast(SIGN_T)null) return = -1;
            else if (x == cast(SIGN_T)null) return = 0;
            else return = 1;
        }

        (conditions: [MIN_T != void]) MIN_T min<MIN_T>(MIN_T one, MIN_T two) {
            return = one;
            if (two < one) return = two;
        }

        (conditions: [MAX_T != void]) MAX_T max<MAX_T>(MAX_T one, MAX_T two) {
            return = one;
            if (two > one) return = two;
        }

        double sin(double x) {
            double t = x;
            double sine = t;
            
            for(int i=1; i<=20; i+=1) {
                double mult = (-x) * (x / ((2*i+1)*(2*i)));
                t = t * mult;
                sine = sine + t;
            }
        } => sine;

        float sin(float x) {
            float t = x;
            float sine = t;
            
            for(int i=1; i<=20; i+=1) {
                float mult = (-x) * (x / ((2*i+1)*(2*i)));
                t = t * mult;
                sine = sine + t;
            }
        } => sine;

        double fma(double a, double b, double c) => (a * b) + c;
        float fma(float a, float b, float c) => (a * b) + c;
        half fma(half a, half b, half c) => (a * b) + c;

        double tan(double d) => std::math::sin(d) / std::math::cos(d);
        float tan(float f) => std::math::sin(f) / std::math::cos(f);

        double mod(double x) {
            return = 1.0d;
            if ((x % 1.0d) != 0.0d) return = (x % 1.0d);
        }

        float mod(float x) {
            return = 1.0f;
            if ((x % 1.0f) != 0.0f) return = (x % 1.0f);
        }

        half mod(half x) {
            return = 1.0h;
            if ((x % 1.0h) != 0.0h) return = (x % 1.0h);
        }

        double round(double x, int n) {
            x = x * std::math::pow(10.0, cast(double)n);
            x += 0.5;
            x = std::math::floor(x) / std::math::pow(10.0, cast(double)n);
        } => x;

        float round(float x, int n) {
            x = x * std::math::pow(10.0f, cast(float)n);
            x += 0.5f;
            x = std::math::floor(x) / std::math::pow(10.0f, cast(float)n);
        } => x;

        bool isPrime(int number) {
            return = true;

            if (number == 1) return = false;
            else for(int i=2; (i * i) <= number; i+=1) {
                if ((number % i) == 0) {
                    return = false;
                    break;
                }
            }
        }
        
        double sigmoid(double x) => 1d / (1d + std::math::exp(-x));
        float sigmoid(float x) => 1f / (1f + std::math::exp(-x));

        double dsigmoid(double x) => x * (1d - x);
        float dsigmoid(float x) => x * (1f - x);
        half dsigmoid(half x) => x * (1h - x);

        void softmax(double* x, int size) {
            double maxValue = x[0];
            double sum;

            for(int i=1; i<size; i++) {
                if (x[i] > maxValue) maxValue = x[i];
            }

            for(int i=0; i<size; i++) {
                x[i] = std::math::exp(x[i] - maxValue);
                sum += x[i];
            }

            for(int i=0; i<size; i++) x[i] /= sum;
        }

        void softmax(float* x, int size) {
            float maxValue = x[0];
            float sum;

            for(int i=1; i<size; i++) {
                if (x[i] > maxValue) maxValue = x[i];
            }

            for(int i=0; i<size; i++) {
                x[i] = std::math::exp(x[i] - maxValue);
                sum += x[i];
            }

            for(int i=0; i<size; i++) x[i] /= sum;
        }

        double softplus(double x) {
            if (x > 37d) return = x;
            else if (x < -37d) return = std::math::exp(x);
            else return = std::math::log(1d + std::math::exp(x));
        }

        float softplus(float x) {
            if (x > 37f) return = x;
            else if (x < -37f) return = std::math::exp(x);
            else return = std::math::log(1f + std::math::exp(x));
        }

        void rmsnorm(double* out, double* x, double* weight, int size) {
            double ss;

            for(int i=0; i<size; i++) ss += x[i] * x[i];
            ss /= cast(double)size;
            ss += 0.00001d;
            ss = 1d / std::math::sqrt(ss);

            for(int i=0; i<size; i++) out[i] = weight[i] * (ss * x[i]);
        }

        void rmsnorm(float* out, float* x, float* weight, int size) {
            float ss;

            for(int i=0; i<size; i++) ss += x[i] * x[i];
            ss /= cast(float)size;
            ss += 0.00001f;
            ss = 1f / std::math::sqrt(ss);

            for(int i=0; i<size; i++) out[i] = weight[i] * (ss * x[i]);
        }

        (inline) double relu(double x) => std::math::max(0.0d, x);
        (inline) float relu(float x) => std::math::max(0.0f, x);

        double drelu(double x) {
            if (x >= 0.0) return = 1.0d;
            else return = 0.0d;
        }

        float drelu(float x) {
            if (x >= 0.0) return = 1.0f;
            else return = 0.0f;
        }

        half drelu(half x) {
            if (x >= 0.0) return = 1.0h;
            else return = 0.0h;
        }

        double gelu(double x) => 0.5d * x * (1d + (std::math::tanh(0.7978845608d * (x + (0.044715d * x * x * x)))));
        float gelu(float x) => 0.5f * x * (1d + (std::math::tanh(0.7978845608f * (x + (0.044715f * x * x * x)))));
        half gelu(half x) => 0.5h * x * (1h + (std::math::tanh(0.7978845608f * (x + (0.044715h * x * x * x)))));

        void geglu(double* input, double* output, int size) {
            for(int i=0; i<size; i+=2) output[i / 2] = input[i] * std::math::gelu(input[i + 1]);
        }

        void geglu(float* input, float* output, int size) {
            for(int i=0; i<size; i+=2) output[i / 2] = input[i] * std::math::gelu(input[i + 1]);
        }
    }
}
