/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/string> <std/memory>

namespace std {
    namespace socket {
        alias AfInet = 2;
        alias PfInet = 2;
        alias AfInet6 = 2;
        alias SockStream = 1;
        alias ShutRD = 0;
        alias ShutWR = 1;
        alias ShutRDWR = 2;

        alias InAddrAny = 0l;
        alias InAddrBroadcast = 4294967295l;

        alias AiPassive = 1;
        alias AiCanonName = 2;
        alias SocketReuseAddr = 2;
        alias SomAxConn = 128;
        alias MsgNoSig = 16384;
    }
}

namespace std {
    namespace socket {
        struct sockaddr {
            ushort sa_family;
            char* sa_data;
        }

        struct sockaddr_storage {
            int sa_family;
            long __ss_align;
            char[120] __ss_padding;
        }

        struct in_addr {
            int s_addr;
        }

        struct addrinfo {
            int ai_flags;
            int ai_family;
            int ai_socktype;
            int ai_protocol;
            uint ai_addrlen;
            std::socket::sockaddr* ai_addr;
            char* ai_canonname;
            std::socket::addrinfo* ai_next;
        }

        struct hostInfo {
            std::socket::addrinfo* addrinfo;
            int result;
        }
        
        struct sockaddr_in {
            short sin_family;
            ushort sin_port;
            std::socket::in_addr sin_addr;
            char[8] sin_zero;
        }

        struct iovec {
            void* iov_base;
            int iov_len;
        }

        struct msghdr {
          void* msg_name;       
          int msg_namelen;

          std::socket::iovec* msg_iov;
          int msg_iovlen;    

          void* msg_control;    
          int msg_controllen;

          int msg_flags;
        }

        struct hostent {
            char* h_name;
            char** h_aliases;
            int h_addrtype;
            int h_length;
            char** h_addr_list;
            char* h_addr;
        }
    }
}

@if((__RAVE_OS == "LINUX") || (__RAVE_OS == "FREEBSD")) {
    namespace std {
        namespace socket {
            (inline) int accept(int sock, std::socket::sockaddr* addr, int* lengthPtr) => cast(int)std::syscall(std::sysctable::Accept4, sock, addr, lengthPtr, 0);
            (inline) int socket(int domain, int type, int protocol) => cast(int)std::syscall(std::sysctable::Socket, domain, type, protocol);
            (inline) int bind(int sock, std::socket::sockaddr* address, int addressLen) => cast(int)std::syscall(std::sysctable::Bind, sock, address, addressLen);
            (inline) int connect(int sock, std::socket::sockaddr* address, int addressLen) => cast(int)std::syscall(std::sysctable::Connect, sock, address, addressLen);

            (inline) int getPeerName(int sock, std::socket::sockaddr* address, int* addressLen) => cast(int)std::syscall(std::sysctable::GetPeerName, sock, address, addressLen);
            (inline) int getSockName(int sock, std::socket::sockaddr* address, int* addressLen) => cast(int)std::syscall(std::sysctable::GetSockName, sock, address, addressLen);

            (inline) int getSockOpt(int sock, int level, int optionName, char* optionValue, int* optionLen) => cast(int)std::syscall(std::sysctable::GetSockOpt, sock, level, optionName, optionValue, optionLen);
            (inline) int setSockOpt(int sock, int level, int optionName, char* optionValue, int optionLen) => cast(int)std::syscall(std::sysctable::SetSockOpt, sock, level, optionName, optionValue, optionLen);

            (inline) int listen(int sock, int backlog) => cast(int)std::syscall(std::sysctable::Listen, sock, backlog);
            (inline) int recvFrom(int sock, void* buffer, int length, int flags, std::socket::sockaddr* address, int* address_len) => cast(int)std::syscall(std::sysctable::RecvFrom, sock, buffer, length, flags, address, address_len);
            (inline) int recv(int sock, char* buffer, int length, int flags) => cast(int)std::socket::recvFrom(sock, buffer, length, flags, null, null);
            (inline) int recvMsg(int sock, std::socket::msghdr* message, int flags) => cast(int)std::syscall(std::sysctable::RecvFrom, sock, message, flags);

            (inline) int sendTo(int sock, char* message, int length, int flags, std::socket::sockaddr* destAddr, int destLen) => cast(int)std::syscall(std::sysctable::SendTo, sock, message, length, flags, destAddr, destLen);
            (inline) int send(int sock, char* message, int length, int flags) => std::socket::sendTo(sock, message, length, flags, null, 0);
            (inline) int sendMsg(int sock, std::socket::msghdr* message, int flags) => cast(int)std::syscall(std::sysctable::SendMsg, sock, message, flags);

            (inline) int shutdown(int sock, int how) => cast(int)std::syscall(std::sysctable::Shutdown, sock, how);

            (inline) int socketpair(int domain, int type, int protocol, int* socketVector) => cast(int)std::syscall(std::sysctable::SocketPair, domain, type, protocol, socketVector);

            (inline) int close(int sock) => cast(int)std::syscall(std::sysctable::Close, sock);

            extern(linkname: "getaddrinfo") int getAddrInfo(char* node, char* service, std::socket::addrinfo* hints, std::socket::addrinfo** res);
            extern(linkname: "freeaddrinfo") void freeAddrInfo(std::socket::addrinfo* res);
            extern(linkname: "gai_strerror") char* getAddrInfoStrErr(int errcode);

            (inline) uint htonl(uint hostlong) {
                @if(__RAVE_LITTLE_ENDIAN) return = ((hostlong <. 24) && 0xFF000000) || ((hostlong <. 8) && 0x00FF0000) || ((hostlong >. 8) && 0x0000FF00) || ((hostlong >. 24) && 0x000000FF);
                @else return = hostlong;
            }

            (inline) ushort htons(ushort hostshort) {
                @if(__RAVE_LITTLE_ENDIAN) return = (hostshort <. 8) || (hostshort >. 8);
                @else return = hostshort;
            }

            (inline) uint ntohl(uint netlong) {
                @if(__RAVE_LITTLE_ENDIAN) return = ((netlong <. 24) && 0xFF000000) || ((netlong <. 8) && 0x00FF0000) || ((netlong >. 8) && 0x0000FF00) || ((netlong >. 24) && 0x000000FF);
                @else return = netlong;
            }

            (inline) ushort ntohs(ushort netshort) {
                @if(__RAVE_LITTLE_ENDIAN) return = (netshort <. 8) || (netshort >. 8);
                @else return = netshort;
            }

            extern(linkname: "gethostbyname") std::socket::hostent* getHostByName(char* name);
            extern(linkname: "gethostbyaddr") std::socket::hostent* getHostByAddr(char* addr, int len, int type);

            extern(linkname: "inet_aton") int inetAton(char* cp, std::socket::in_addr* inp);
            extern(linkname: "inet_ntoa") char* inetNtoa(std::socket::in_addr _in);
            extern(linkname: "inet_pton") int inetPton(int af, char* src, void* dst);
            extern(linkname: "inet_ntop") char* inetNtop(int af, void* src, char* dst, int cnt);
            extern(linkname: "inet_addr") std::socket::in_addr inetAddr(char* cp);

            extern(vararg, linkname: "ioctl") int ioctl(int d, int request);  
        }

        struct socket {
            int fd;
            std::socket::sockaddr_in* addr;
            int addrlen;

            std::socket this {
                std::socket this;
                this.fd = -1;
                this.addr = null;
                this.addrlen = 0;
            } => this;

            int open(char* ip, int port, long flag) {
                this.fd = std::socket::socket(std::socket::AfInet, std::socket::SockStream, 0);
                if(this.fd < 0) return = this.fd;
                else {
                    this.addr = std::new<std::socket::sockaddr_in>();
                    this.addr.sin_family = std::socket::AfInet;
                    this.addr.sin_port = std::socket::htons(cast(ushort)port);
                    this.addr.sin_addr.s_addr = std::socket::htonl(flag);
                    this.addr.sin_addr = std::socket::inetAddr(ip);
                }
            }

            int openAny(int port) {
                this.fd = std::socket::socket(std::socket::AfInet, std::socket::SockStream, 0);
                if(this.fd < 0) return = this.fd;
                else {
                    this.addr = std::new<std::socket::sockaddr_in>();
                    this.addr.sin_family = std::socket::AfInet;
                    this.addr.sin_port = std::socket::htons(cast(ushort)port);
                    this.addr.sin_addr.s_addr = std::socket::htonl(cast(int)0);
                }
            }

            (inline) int bind => std::socket::bind(this.fd, cast(std::socket::sockaddr*)this.addr, sizeof(std::socket::sockaddr_in));
            (inline) int listen => std::socket::listen(this.fd, std::socket::SomAxConn);
            (inline) int connect => std::socket::connect(this.fd, cast(std::socket::sockaddr*)this.addr, sizeof(std::socket::sockaddr_in));

            std::socket accept {
                return = std::socket();
                return.addrlen = sizeof(std::socket::sockaddr_in);
                return.fd = std::socket::accept(this.fd, cast(std::socket::sockaddr*)this.addr, return.&addrlen);
            }

            (inline) int read(char* data, int length) => std::socket::recv(this.fd, data, length, std::socket::MsgNoSig);
            (inline) int write(char* data, int length) => std::socket::send(this.fd, data, length, std::socket::MsgNoSig);
            (inline) int write(char* data) => std::socket::send(this.fd, data, std::cstring::strlen(data), std::socket::MsgNoSig);
            (inline) int write(std::string str) => std::socket::send(this.fd, str.data, str.length, std::socket::MsgNoSig);

            void close {
                std::socket::close(this.fd);
                this.fd = -1;

                if(this.addr != null) {
                    std::free(this.addr);
                    this.addr = null;
                }
            }

            void ~this {
                if(this.addr != null) {
                    std::free(this.addr);
                    this.addr = null;
                }
            }
        }
    }
}