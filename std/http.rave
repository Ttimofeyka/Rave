/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/string> <std/vector> <std/socket> <std/map> <std/io>

namespace std {
    namespace http {
        struct Response {
            std::hashmap<std::string, std::string> headers;
            std::string body;
            int status;
            int success;

            std::http::Response this {
                std::http::Response this;

                this.headers = std::hashmap<std::string, std::string>();
                this.body = "";
                this.status = 0;
                this.success = 0;
            } => this;

            void ~this {
                ~(this.headers);
                ~(this.body);
                this.status = 0;
                this.success = 0;
            }
        }

        struct Request {
            std::hashmap<std::string, std::string> headers;
            std::string body;
            std::string method;
            std::string url;
            int success;

            std::http::Request this {
                std::http::Request this;

                this.headers = std::hashmap<std::string, std::string>();
                this.body = "";
                this.method = "";
                this.url = "";
                this.success = 0;
            } => this;

            void ~this {
                ~(this.headers);
                ~(this.body);
                ~(this.method);
                ~(this.url);
                this.success = 0;
            }
        }

        struct Connection {
            std::socket socket;

            std::string protocol, host, path;
            char* port;

            std::http::Connection this(char* url, char* port) {
                std::http::Connection this;

                this.socket = std::socket();
                this.protocol = "";
                this.host = "";
                this.path = "/";
                this.port = port;

                usize p = 0;
                usize state = 0;

                if(url != null) {
                    while(url[p] != '\0') {
                        if(state == 0) {
                            if(url[p] != ':') {
                                this.protocol.add(url[p]);
                                p += 1;
                            }
                            else {
                                p += 3; // Skip the double slash
                                state += 1;
                            }
                        }
                        else {
                            if(state == 1) {
                                if(url[p] != '/') this.host.add(url[p]);
                                else state += 1;
                            }
                            else this.path.add(url[p]);
    
                            p += 1;
                        }
                    }
                }
            } => this;

            int open {
                char[46] hostBuffer;
                char* connHost = host.data;

                if(!std::ipv4::isValid(host.data)) {
                    std::socket::addrinfo* res;
                    std::socket::getAddrInfo(host.data, port, cast(std::socket::addrinfo*)0, &res);

                    for(std::socket::addrinfo* i = res; i != cast(std::socket::addrinfo*)0; i=i.ai_next) {
                        if(i.ai_addr.sa_family == std::socket::AfInet) {
                            std::socket::sockaddr_in* p = cast(std::socket::sockaddr_in*)i.ai_addr;
                            std::socket::inetNtop(std::socket::AfInet, p.&sin_addr, &hostBuffer, 46);
                            connHost = &hostBuffer;
                            break;
                        }

                        // TODO: IPv6 support
                    }

                    std::socket::freeAddrInfo(res);
                }

                if(socket.open(connHost, std::cstring::stol(port), std::socket::InAddrBroadcast) == -1) return = -1;
                else if(socket.connect() < 0) return = -2;
            }

            // Primitives

            (inline) int write(std::cstring buffer) => socket.write(buffer.data, buffer.length);
            (inline) int write(std::string buffer) => socket.write(buffer.data, buffer.length);

            (inline) int read(char* buffer, int length) => socket.read(buffer, length);

            (inline) int close => socket.close();

            int sendRequestData(std::cstring method, std::hashmap<std::string, std::string>* headers, std::cstring body) {
                std::string req = std::sprint(method, " ", path, " HTTP/1.1\r\nHost: ", host, "\r\n");
                defer ~req;

                if(headers != null) {
                    std::hashmap::iterator<std::string, std::string> iterator;
                    headers.next(&iterator);

                    while(iterator.current != null) {
                        req.append(iterator.current.key);
                        req.appendC(": ", 2);
                        req.append(iterator.current.value);
                        req.appendC("\r\n", 2);
                        headers.next(&iterator);
                    }
                }
                else req.appendC("\r\n", 2);

                req.appendC("\r\n", 2);
                if(body.data != null) req.appendC(body.data, body.length);

                if(socket.write(req) < 0) @return(-1);
            }

            int sendRequest(std::http::Request req) => sendRequestData(std::cstring(req.method.data, req.method.length), req.&headers, std::cstring(req.body.data, req.body.length));

            int sendResponseData(int status, std::cstring message, std::hashmap<std::string, std::string>* headers, std::cstring body) {
                std::string res = std::sprint("HTTP/1.1 ", status);
                defer ~res;

                if(message.data != null) {
                    res.appendC(message.data, message.length);
                    res.add(' ');
                }

                if(headers != null) {
                    std::hashmap::iterator<std::string, std::string> iterator;
                    headers.next(&iterator);

                    while(iterator.current != null) {
                        res.append(iterator.current.key);
                        res.appendC(": ", 2);
                        res.append(iterator.current.value);
                        res.appendC("\r\n", 2);
                        headers.next(&iterator);
                    }
                }
                else res.appendC("\r\n", 2);

                res.appendC("\r\n", 2);
                if(body.data != null) res.appendC(body.data, body.length);

                if(socket.write(res) < 0) @return(-1);
            }

            int sendResponse(std::http::Response res) => sendResponseData(res.status, std::cstring(null, 0), res.&headers, std::cstring(res.body.data, res.body.length));

            int readHeaders(long* contentLength, std::hashmap<std::string, std::string>* headers) {
                char[513] buf;
                bool isR = false;
                bool isValueMode = false;

                std::string headerName = "";
                defer ~headerName;

                std::string headerValue = "";
                defer ~headerValue;

                int readed = socket.read(&buf, 1);

                while(readed > 0) {
                    if(buf[0] == '\r') {
                        if(headerName.length == 14) {
                            char* cl = "content-length";
                            bool isEqual = true;

                            for(usize i=0; i<14; i++) {
                                if(std::ascii::toLower(headerName.data[i]) != cl[i]) {isEqual = false; break;}
                            }

                            if(isEqual) contentLength[0] = headerValue.toInt();
                        }

                        if(headerName.length > 0) {
                            headers.set(headerName, headerValue);

                            headerName = std::string("");
                            headerValue = std::string("");
                        }

                        isR = true;
                        isValueMode = false;

                        readed = socket.read(&buf, 1);
                    }
                    else if((buf[0] == '\n') && (isR)) {
                        isR = false;

                        // New header or the start of body?
                        readed = socket.read(&buf, 1);

                        if(buf[0] == '\r') {
                            // Body
                            readed = socket.read(&buf, 1);
                            if(buf[0] == '\n') break;
                        }
                    }
                    else if(!isValueMode) {
                        if(buf[0] == ':') {
                            isValueMode = true;
                            readed = socket.read(&buf, 1);

                            while((std::ascii::isSpace(buf[0])) && (readed > 0)) readed = socket.read(&buf, 1);
                        }
                        else if(std::ascii::isSpace(buf[0])) readed = socket.read(&buf, 1);
                        else {
                            headerName.add(buf[0]);
                            readed = socket.read(&buf, 1);
                        }
                    }
                    else {
                        headerValue.add(buf[0]);
                        readed = socket.read(&buf, 1);
                    }
                }
            }

            int readResponseData(int* statusPtr, std::hashmap<std::string, std::string>* headers, std::string* body) {
                char[513] buf;

                long contentLength = -1;
                int readed = socket.read(&buf, 1);

                // Parse first line (skip HTTP version, get status, skip message)
                while((std::ascii::isSpace(buf[0])) && (readed > 0)) readed = socket.read(&buf, 1);
                while((!std::ascii::isSpace(buf[0])) && (readed > 0)) readed = socket.read(&buf, 1);
                while((std::ascii::isSpace(buf[0])) && (readed > 0)) readed = socket.read(&buf, 1);

                // Status
                std::string status = "";
                defer ~status;

                while((!std::ascii::isSpace(buf[0])) && (readed > 0)) {
                    status.add(buf[0]);
                    readed = socket.read(&buf, 1);
                }

                if(status.length > 0) statusPtr[0] = status.toInt();
                else @return(-1); // Bad HTTP status

                while(readed > 0) {
                    if((buf[0] == '\r')) {
                        readed = socket.read(&buf, 1);

                        if((readed > 0) && (buf[0] == '\n')) {
                            readed = socket.read(&buf, 1);
                            break;
                        }
                    }
                    else readed = socket.read(&buf, 1);
                }

                if(readHeaders(&contentLength, headers) == -1) @return(-1);

                if(contentLength > 0) {
                    while(contentLength >= 512) {
                        readed = socket.read(&buf, 512);
                        if(readed > 0) body.appendC(&buf, readed);

                        contentLength -= 512;
                    }

                    readed = socket.read(&buf, contentLength);
                    if(readed > 0) body.appendC(&buf, readed);
                }
            }

            (inline) std::http::Response readResponse {
                return = std::http::Response();

                if(readResponseData(return.&status, return.&headers, return.&body) == -1) {
                    return.status = -1;
                    return.success = -1;
                }
            }

            std::http::Request readRequest {
                return = std::http::Request();

                char[513] buf;

                long contentLength = -1;
                int readed = socket.read(&buf, 1);

                // Parse first line (get method, get url, skip HTTP version)

                // Method
                while((std::ascii::isSpace(buf[0])) && (readed > 0)) readed = socket.read(&buf, 1);
                while((!std::ascii::isSpace(buf[0])) && (readed > 0)) {
                    return.method.add(buf[0]);
                    readed = socket.read(&buf, 1);
                }

                // URL
                while((std::ascii::isSpace(buf[0])) && (readed > 0)) readed = socket.read(&buf, 1);
                while((!std::ascii::isSpace(buf[0])) && (readed > 0)) {
                    return.url.add(buf[0]);
                    readed = socket.read(&buf, 1);
                }

                while(readed > 0) {
                    if((buf[0] == '\r')) {
                        readed = socket.read(&buf, 1);

                        if((readed > 0) && (buf[0] == '\n')) {
                            readed = socket.read(&buf, 1);
                            break;
                        }
                    }
                    else readed = socket.read(&buf, 1);
                }

                if(readHeaders(&contentLength, return.&headers) == -1) {
                    return.success = -1;
                    @return();
                }

                if(contentLength > 0) {
                    while(contentLength >= 512) {
                        readed = socket.read(&buf, 512);
                        if(readed > 0) return.body.appendC(&buf, readed);

                        contentLength -= 512;
                    }

                    readed = socket.read(&buf, contentLength);
                    if(readed > 0) return.body.appendC(&buf, readed);
                }
            }

            // HTTP/1.1 request (write + read)
            std::http::Response request(std::cstring method, std::hashmap<std::string, std::string>* headers, std::cstring body) {
                return = std::http::Response();

                if(sendRequestData(method, headers, body) == -1) {
                    return.status = -1;
                    return.success = -1;
                    @return();
                }

                if(readResponseData(return.&status, return.&headers, return.&body) == -1) {
                    return.status = -1;
                    return.success = -1;
                }
            }

            void ~this {
                ~(this.socket);
                ~(this.protocol);
                ~(this.host);
                ~(this.path);
            }
        }

        struct Server {
            std::socket socket;
            std::string port;

            std::http::Server this {
                std::http::Server this;

                this.socket = std::socket();
                this.port = null;
            } => this;

            int open(char* url, int port) {
                this.port = std::string::fromNumber(port);

                if(socket.open(url, port, std::socket::InAddrAny) == -1) @return(-1);
                if(socket.bind() == -1) @return(-2);
                if(socket.listen() == -1) @return(-3);
            }

            std::http::Connection accept {
                return = std::http::Connection(null, port.data);

                socket.accept(return.&socket);
            }

            (inline) int close => socket.close();

            void ~this {
                ~(this.socket);
                if(this.port != null) ~(this.port);
            }
        }
    }
}