/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/thread> <std/ascii>

// TODO: Add more supported platforms

@if((__RAVE_PLATFORM == "X86_64") || (__RAVE_PLATFORM == "AARCH64") || (__RAVE_PLATFORM == "POWERPC64")) {
    namespace std {
        namespace cstring {
            uint strlen(char* str) {
                ulong align = ptoi(&str[return]) % 8;

                while(align != 0) {
                    if(str[return] == '\0') @return();
                    align -= 1;
                    return += 1;
                }

                while(true) {
                    ulong chunk = ((cast(ulong*)&str[return])[0]);

                    if(((chunk - 0x0101010101010101) && (!chunk) && 0x8080808080808080) != 0) break;

                    return += 8;
                }

                while(str[return] != '\0') return += 1;
            }
        }
    }
}
@else @if((__RAVE_PLATFORM == "X86") || (__RAVE_PLATFORM == "ARM") || (__RAVE_PLATFORM == "POWERPC")) {
    namespace std {
        namespace cstring {
            uint strlen(char* str) {
                uint align = ptoi(&str[return]) % 4;

                while(align != 0) {
                    if(str[return] == '\0') @return();
                    align -= 1;
                    return += 1;
                }

                while(true) {
                    uint chunk = ((cast(uint*)&str[return])[0]);

                    if(((chunk - 0x01010101) && (!chunk) && 0x80808080) != 0) break;

                    return += 4;
                }

                while(str[return] != '\0') return += 1;
            }
        }
    }
}
@else {
    namespace std {
        namespace cstring {
            uint strlen(char* str) {
                while(str[return] != '\0') return += 1;
            }
        }
    }
}

namespace std {
    namespace cstring {
        (inline) const(char)* fromBool(bool b) {
            return = "false";
            if(b) return = "true";
        }

        (inline) bool strncmp(const(char)* s1, const(char)* s2, uint n) {
            int i = 0;
            return = true;
            while(i < n) {
                if(s1[i] != s2[i]) {
                    return = false;
                    break;
                }
                i += 1;
            }
        }

        (inline, nochecks) bool strcmp(const(char)* s1, const(char)* s2) {
            int length1 = std::cstring::strlen(s1);
            int length2 = std::cstring::strlen(s2);

            return = true;

            if(length1 != length2) return = false;
            else return = std::cstring::strncmp(s1, s2, length1);
        }

        (inline, nochecks) char* strchr(char* chars, char c) {
            uint i = 0;
            return = null;

            while(chars[i] != '\0') {
                if(chars[i] == c) {
                    return = &chars[i];
                    break;
                }

                i += 1;
            }
        }

        (nochecks) char* strstr(const(char)* str, const(char)* substr) {
            int i = 0;
            char* ptr = str;
            bool done = false;
            int substrLen = std::cstring::strlen(substr);

            while(ptr[i] != '\0') {
                if(std::cstring::strncmp(ptr, substr, substrLen)) {
                    done = true;
                    break;
                }
                ptr = itop(char*, ptoi(ptr) + 1);
            }

            if(!done) ptr = null;
        } => ptr;

        (nochecks) int indexOf(const(char)* str, char ch) {
            while((str[return] != '\0') && (str[return] != ch)) return += 1;
            if(str[return] == '\0') return = -1;
        }

        char* ltos(long number, char* endBuffer) {
            char[22] ltosBuffer;

            if(number == 0) {
                endBuffer[0] = '0';
                endBuffer[1] = '\0';
                @return(endBuffer);
            }

            bool isNegative = false;
            if(number < 0) {
                isNegative = true;
                number = -number;
            }

            int index = 0;
            while(number > 0) {
                ltosBuffer[index] = ((number % 10l) + '0');
                number = number / 10l;
                index += 1;
            }

            if(isNegative) {
                ltosBuffer[index] = '-';
                index += 1;
            }

            endBuffer[index] = '\0';

            int endI = 0;
            for(int i=index-1; i>=0; i--) {
                endBuffer[endI] = ltosBuffer[i];
                endI += 1;
            }
        } => endBuffer;

        char* ultos(ulong number, char* endBuffer) {
            char[21] ltosBuffer;

            if(number == 0) {
                endBuffer[0] = '0';
                endBuffer[1] = '\0';
                @return(endBuffer);
            }

            int index = 0;
            while(number > 0) {
                ltosBuffer[index] = ((number % 10) + '0');
                number = number / 10;
                index += 1;
            }

            endBuffer[index] = '\0';

            int endI = 0;
            for(int i=index-1; i>=0; i--) {
                endBuffer[endI] = ltosBuffer[i];
                endI += 1;
            }
        } => endBuffer;

        char* ctos(cent number, char* endBuffer) {
            char[42] ctosBuffer;

            if(number == 0) {
                endBuffer[0] = '0';
                endBuffer[1] = '\0';
                @return(endBuffer);
            }

            bool isNegative = false;
            if(number < 0) {
                isNegative = true;
                number = -number;
            }

            int index = 0;
            while(number > 0) {
                ctosBuffer[index] = ((number % cast(cent)10) + '0');
                number = number / 10;
                index += 1;
            }

            if(isNegative) {
                ctosBuffer[index] = '-';
                index += 1;
            }

            endBuffer[index] = '\0';

            int endI = 0;
            for(int i=index-1; i>=0; i--) {
                endBuffer[endI] = ctosBuffer[i];
                endI += 1;
            }
        } => endBuffer;

        char* uctos(ucent number, char* endBuffer) {
            char[40] uctBuffer;
            uint pos;
            for(pos = 0; number != 0u; pos += 1) {
                uctBuffer[pos] = (number % 10) + '0';
                number /= 10;
            }

            uint outpos;
            for(outpos = 0; true; outpos += 1) {
                pos -= 1;
                endBuffer[outpos] = uctBuffer[pos];
                if(pos == 0)
                    break;
            }
            endBuffer[outpos + 1] = '\0';
        } => endBuffer;
        
        char* dtos(double number, int precision, char* buffer) {
            long lPart;
            int i;
            int tI;
            int len;
            char[32] temp;
            int decimals;

            bool isNegative = false;
            if(number < 0.0d) {
                isNegative = true;
                number = -number;
                buffer[0] = '-';
                i += 1;
            }

            lPart = cast(long)number;
            std::cstring::ltos(lPart, &temp);
            len = std::cstring::strlen(&temp);

            while(tI < len) {
                buffer[i] = temp[tI];
                i += 1;
                tI += 1;
            }
            
            number = number - cast(double)lPart;
            buffer[i] = '.';
            i += 1;
            decimals = 0;

            while(decimals < precision) {
                number = number * 10;
                lPart = cast(long)number;
                buffer[i] = lPart + '0';
                i += 1;
                decimals += 1;
                number = number - cast(double)lPart;
            }

            while(buffer[i - 1] == '0') i -= 1;

            if(buffer[i - 1] == '.') i -= 1;

            buffer[i] = '\0';
        } => buffer;

        long stol(const(char)* data, int length) {
            return = 0;
            bool isNegative = false;
            long coeff = 1;

            for(int i=length - 1; i>=0; i--) {
                if(data[i] == '-') {
                    isNegative = true;
                    break;
                }
                else if((data[i] < '0') || (data[i] > '9')) break;
                return += (cast(long)(data[i] - '0') * coeff);
                coeff *= 10;
            }

            if(isNegative) return = -return;
        }

        (inline) long stol(const(char)* data) => std::cstring::stol(data, std::cstring::strlen(data));

        ulong stoul(const(char)* data, int length) {
            return = 0;
            ulong coeff = 1;

            for(int i=length - 1; i>=0; i--) {
                if((data[i] < '0') || (data[i] > '9')) break;
                return += (cast(ulong)(data[i] - '0') * coeff);
                coeff *= 10;
            }
        }

        (inline) ulong stoul(const(char)* data) => std::cstring::stoul(data, std::cstring::strlen(data));

        cent stoc(const(char)* data, int length) {
            return = 0;
            bool isNegative = false;
            cent coeff = 1;

            for(int i=length - 1; i>=0; i--) {
                if(data[i] == '-') {
                    isNegative = true;
                    break;
                }
                else if((data[i] < '0') || (data[i] > '9')) break;
                return += (cast(cent)(data[i] - '0') * coeff);
                coeff *= 10;
            }

            if(isNegative) return = -return;
        }

        (inline) cent stoc(const(char)* data) => std::cstring::stoc(data, std::cstring::strlen(data));

        ucent stouc(const(char)* data, int length) {
            return = 0;
            ucent coeff = 1;

            for(int i=length - 1; i>=0; i--) {
                if((data[i] < '0') || (data[i] > '9')) break;
                return += (cast(ucent)(data[i] - '0') * coeff);
                coeff *= 10;
            }
        }

        (inline) ucent stouc(const(char)* data) => std::cstring::stouc(data, std::cstring::strlen(data));

        double stod(const(char)* data, int length) {
            return = 0.0d;
            bool isNegative = false;
            int i = 0;
            int decimalPoint = -1;

            // Handle optional leading whitespace
            while((i < length) && (std::ascii::isSpace(data[i]))) i += 1;

            // Handle optional sign
            if((i < length) && ((data[i] == '-') || (data[i] == '+'))) {
                if(data[i] == '-') isNegative = true;
                i += 1;
            }

            // Process digits before the decimal point
            while((i < length) && (std::ascii::isDigit(data[i]))) {
                return = return * 10 + (data[i] - '0');
                i += 1;
            }

            // Process the decimal point
            if((i < length) && (data[i] == '.')) {
                decimalPoint = i;
                i += 1;
            }

            // Process digits after the decimal point
            double fraction = 0.0d;
            double fractionScale = 1.0d;
            while((i < length) && (std::ascii::isDigit(data[i]))) {
                fraction = fraction * 10 + (data[i] - '0');
                fractionScale *= 10;
                i += 1;
            }

            // Combine the integer and fractional parts
            if(decimalPoint != -1) return += fraction / fractionScale;
            if(isNegative) return = -return;
        }

        real stor(const(char)* data, int length) {
            return = 0.0d;
            bool isNegative = false;
            int i = 0;
            int decimalPoint = -1;

            // Handle optional leading whitespace
            while((i < length) && (std::ascii::isSpace(data[i]))) i += 1;

            // Handle optional sign
            if((i < length) && ((data[i] == '-') || (data[i] == '+'))) {
                if(data[i] == '-') isNegative = true;
                i += 1;
            }

            // Process digits before the decimal point
            while((i < length) && (std::ascii::isDigit(data[i]))) {
                return = return * 10 + (data[i] - '0');
                i += 1;
            }

            // Process the decimal point
            if((i < length) && (data[i] == '.')) {
                decimalPoint = i;
                i += 1;
            }

            // Process digits after the decimal point
            real fraction = 0.0r;
            real fractionScale = 1.0r;
            while((i < length) && (std::ascii::isDigit(data[i]))) {
                fraction = fraction * 10r + (data[i] - '0');
                fractionScale *= 10r;
                i += 1;
            }

            // Combine the integer and fractional parts
            if(decimalPoint != -1) return += fraction / fractionScale;
            if(isNegative) return = -return;
        }

        (inline) double stod(const(char)* data) => std::cstring::stod(data, std::cstring::strlen(data));

        (inline) real stor(const(char)* data) => std::cstring::stor(data, std::cstring::strlen(data));
    }
}
