/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

namespace std {
    alias NotFound = -1;
    alias NotEnoughMemory = -2;
    alias BeyondSize = -3;

    alias SigInt = 2;
    alias SigIll = 4;
    alias SigFpe = 8;
    alias SigKill = 9;
    alias SigSegv = 11;
    alias SigAlarm = 14; // SigAlrm
    alias SigTerm = 15;
    alias SigStop = 19;
    alias SigBreak = 21;
    alias SigAbort = 22; // SigAbrt
}

@if(__RAVE_OS == "LINUX") {
    namespace std {
        struct sigaction {
            void(int) handler;
            void* saction;
            void* mask;
            int flags;
            void() restorer;
        }

        void signal(int flag, void(int) catcher) {
            std::sigaction act;
            std::sigaction oldAct;

            act.handler = catcher;
            std::memset(act.&handler, sizeof(void*), 0);
            act.flags = 0;

            act.flags = act.flags | 268435456;

            std::syscall(std::sysctable::SigAction, flag, &act, &oldAct);
        }
    }
}
@else @if(__RAVE_OS == "WINDOWS") {
    namespace std {
        extern(linkname: "SetConsoleCtrlHandler") char SetConsoleCtrlHandler(char(int) handler, char add);

        void signal(int flag, void(int) catcher) {
            // Windows doesn't have a direct equivalent to the POSIX signal function,
            // but we can use the SetConsoleCtrlHandler function to handle some signals.

            if((flag == std::SigInt) || (flag == std::SigTerm)) std::SetConsoleCtrlHandler(cast(char(int))catcher, 1c);
        }
    }
}
@else {
    namespace std {
        extern(linkname: "signal") void signal(int flag, void(int) catcher);
    }
}
