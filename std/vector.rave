/*
This Source Code Form is subject to the terms of the Mozilla
Public License, v. 2.0. If a copy of the MPL was not distributed
with this file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

import <std/memory> <std/map>

namespace std {
    (data: "data", length: "length", conditions: [VECTOR_T != void]) struct vector<VECTOR_T> {
        (noOperators) VECTOR_T* data;
        usize capacity;
        usize length;

        (arrayable) std::vector<VECTOR_T> this {
            std::vector<VECTOR_T> this;
            this.data = cast(VECTOR_T*)std::malloc(sizeof(VECTOR_T));
            this.capacity = sizeof(VECTOR_T);
            this.length = 0;
        } => this;

        std::vector<VECTOR_T> this(usize size) {
            std::vector<VECTOR_T> this;
            this.data = cast(VECTOR_T*)std::malloc(sizeof(VECTOR_T) * size);
            this.capacity = sizeof(VECTOR_T) * size;
            this.length = size;
        } => this;

        std::vector<VECTOR_T> this(VECTOR_T* data, usize size) {
            std::vector<VECTOR_T> this;
            this.data = cast(VECTOR_T*)std::malloc(sizeof(VECTOR_T) * size);
            this.capacity = sizeof(VECTOR_T) * size;
            this.length = size;
            std::memcpy(cast(char*)this.data, cast(char*)data, size * sizeof(VECTOR_T));
        } => this;

        (inline) VECTOR_T* ptr => this.data;

        void add(VECTOR_T value) {
            if((this.length * sizeof(VECTOR_T)) == this.capacity) {
                this.data = cast(VECTOR_T*)std::realloc(cast(void*)this.data, this.capacity * 2);
                this.capacity = this.capacity * 2;
            }
            this.data[this.length] = value;
            this.length = this.length + 1;
        }

        (inline) void assign(std::vector<VECTOR_T> of) {
            for(usize i=0; i<of.length; i+=1) {this.add(of.data[i]);}
        }

        (inline) void set(usize index, VECTOR_T value) {
            @if(__RAVE_RUNTIME_CHECKS) if(index < this.length) this.data[index] = value;
            @else this.data[index] = value;
        }

        void zero {
            for(usize i=0; i<this.length; i++) this.data[i] = cast(VECTOR_T)null;
        }

        void clear {
            if(capacity > ((sizeof(VECTOR_T) * 4))) {
                std::free(this.data);
                this.data = cast(VECTOR_T*)std::malloc(sizeof(VECTOR_T));
                this.capacity = sizeof(VECTOR_T);
            }
            this.length = 0;
        }

        std::vector<VECTOR_T> copy {
            std::vector<VECTOR_T> buffer;
            buffer.data = cast(VECTOR_T*)std::malloc(this.capacity);
            buffer.capacity = this.capacity;
            buffer.length = this.length;

            for(usize i=0; i<this.length; i+=1) buffer.set(i, this.data[i]);
        } => buffer;

        (inline) VECTOR_T operator[](std::vector<VECTOR_T>* v, usize index) {
            @if(__RAVE_RUNTIME_CHECKS) if(index < v.length) return = v.data[index];
            @else return = v.data[index];
        }

        (inline) void operator[]=(std::vector<VECTOR_T>* v, usize index, VECTOR_T value) {
            @if(__RAVE_RUNTIME_CHECKS) if(index < v.length) v.data[index] = value;
            @else v.data[index] = value;
        }

        (inline) VECTOR_T* operator[]&(std::vector<VECTOR_T>* v, usize index) {
            @if(__RAVE_RUNTIME_CHECKS) if(index < v.length) return = v.&data[index];
            @else return = v.&data[index];
        }

        (inline) void swap(usize first, usize second) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if((first < this.length) && (second < this.length)) @return();
            }

            (noOperators) VECTOR_T temp = this.data[first];
            this.data[first] = this.data[second];
            this.data[second] = temp;
        }

        std::vector<VECTOR_T> operator+(std::vector<VECTOR_T> one, std::vector<VECTOR_T> two) {
            std::vector<VECTOR_T> cp = one.copy();
            cp.assign(two);
        } => cp;

        void remove(usize index) {
            @if(__RAVE_RUNTIME_CHECKS) {
                if(index < this.length) @return();
            }

            for(usize i=index; i<this.length; i+=1) {
                if((i + 1) < this.length) this.data[i] = this.data[i + 1];
            }

            this.length -= 1;
        }

        (inline) void removeLast {
            if(this.length > 0) this.remove(this.length - 1);
        }

        void ~this {
            if(this.data != null) {
                std::free(cast(void*)this.data);
                this.data = null;
                this.length = 0;
                this.capacity = 0;
            }
        }

        void transform(VECTOR_T(VECTOR_T) fn) {
            for(usize i=0; i<this.length; i++) this.data[i] = fn(this.data[i]);
        }

        uint hash {
            return = this.length;
            for(usize i=0; i<this.length; i++) return = return * i + 7588 + (return <. 6) + (return >. 2);
        }
    }
}
