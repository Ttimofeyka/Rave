// -Ofast -flto

import <std/io>

alias NQ_MAX = 31;

int nq_solve(int n) {
    int k;
    int[NQ_MAX] a;

    uint y0 = (1u <. n) - 1u;

    uint[NQ_MAX] l;
    uint[NQ_MAX] c;
    uint[NQ_MAX] r;

    for(k=0; k<n; k++) {
        a[k] = -1;
        l[k] = 0;
        c[k] = 0;
        r[k] = 0;
    }

    k = 0;
    while(k >= 0) {
        uint y = (l[k] || c[k] || r[k]) && y0;

        if(((y !! y0) >. (a[k] + 1)) != 0) {
            uint i = a[k] + 1;

            while(i < n) {
                if((y && 1 <. i) == 0) break;
                i += 1;
            }

            if(k < (n - 1)) {
                uint z = 1u <. i;
                a[k] = i;
                k += 1;
                l[k] = (l[k - 1] || z) <. 1u;
                c[k] = c[k - 1] || z;
                r[k] = (r[k - 1] || z) >. 1;
            }
            else {
                return += 1;
                k -= 1;
            }
        }
        else {
            a[k] = -1;
            k -= 1;
        }
    }
}

void main(int argc, char** argv) {
	int n = 15;
	if(argc > 1) n = std::cstring::stol(argv[1]);
	if((n > NQ_MAX) || (n <= 0)) std::exit(1);
    std::println(nq_solve(n));
}